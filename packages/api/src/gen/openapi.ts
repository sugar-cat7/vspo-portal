/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * api
 * API
 * OpenAPI spec version: 1.0.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * A machine readable error code.
 */
export type ErrBadRequestErrorCode =
  (typeof ErrBadRequestErrorCode)[keyof typeof ErrBadRequestErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrBadRequestErrorCode = {
  BAD_REQUEST: "BAD_REQUEST",
} as const;

export type ErrBadRequestError = {
  /** A machine readable error code. */
  code: ErrBadRequestErrorCode;
  /** A link to our documentation with more details about this error code */
  docs: string;
  /** A human readable explanation of what went wrong */
  message: string;
  /** Please always include the requestId in your error report */
  requestId: string;
};

export interface ErrBadRequest {
  error: ErrBadRequestError;
}

/**
 * A machine readable error code.
 */
export type ErrUnauthorizedErrorCode =
  (typeof ErrUnauthorizedErrorCode)[keyof typeof ErrUnauthorizedErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrUnauthorizedErrorCode = {
  UNAUTHORIZED: "UNAUTHORIZED",
} as const;

export type ErrUnauthorizedError = {
  /** A machine readable error code. */
  code: ErrUnauthorizedErrorCode;
  /** A link to our documentation with more details about this error code */
  docs: string;
  /** A human readable explanation of what went wrong */
  message: string;
  /** Please always include the requestId in your error report */
  requestId: string;
};

export interface ErrUnauthorized {
  error: ErrUnauthorizedError;
}

/**
 * A machine readable error code.
 */
export type ErrForbiddenErrorCode =
  (typeof ErrForbiddenErrorCode)[keyof typeof ErrForbiddenErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrForbiddenErrorCode = {
  FORBIDDEN: "FORBIDDEN",
} as const;

export type ErrForbiddenError = {
  /** A machine readable error code. */
  code: ErrForbiddenErrorCode;
  /** A link to our documentation with more details about this error code */
  docs: string;
  /** A human readable explanation of what went wrong */
  message: string;
  /** Please always include the requestId in your error report */
  requestId: string;
};

export interface ErrForbidden {
  error: ErrForbiddenError;
}

/**
 * A machine readable error code.
 */
export type ErrNotFoundErrorCode =
  (typeof ErrNotFoundErrorCode)[keyof typeof ErrNotFoundErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrNotFoundErrorCode = {
  NOT_FOUND: "NOT_FOUND",
} as const;

export type ErrNotFoundError = {
  /** A machine readable error code. */
  code: ErrNotFoundErrorCode;
  /** A link to our documentation with more details about this error code */
  docs: string;
  /** A human readable explanation of what went wrong */
  message: string;
  /** Please always include the requestId in your error report */
  requestId: string;
};

export interface ErrNotFound {
  error: ErrNotFoundError;
}

/**
 * A machine readable error code.
 */
export type ErrConflictErrorCode =
  (typeof ErrConflictErrorCode)[keyof typeof ErrConflictErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrConflictErrorCode = {
  CONFLICT: "CONFLICT",
} as const;

export type ErrConflictError = {
  /** A machine readable error code. */
  code: ErrConflictErrorCode;
  /** A link to our documentation with more details about this error code */
  docs: string;
  /** A human readable explanation of what went wrong */
  message: string;
  /** Please always include the requestId in your error report */
  requestId: string;
};

export interface ErrConflict {
  error: ErrConflictError;
}

/**
 * A machine readable error code.
 */
export type ErrTooManyRequestsErrorCode =
  (typeof ErrTooManyRequestsErrorCode)[keyof typeof ErrTooManyRequestsErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrTooManyRequestsErrorCode = {
  TOO_MANY_REQUESTS: "TOO_MANY_REQUESTS",
} as const;

export type ErrTooManyRequestsError = {
  /** A machine readable error code. */
  code: ErrTooManyRequestsErrorCode;
  /** A link to our documentation with more details about this error code */
  docs: string;
  /** A human readable explanation of what went wrong */
  message: string;
  /** Please always include the requestId in your error report */
  requestId: string;
};

export interface ErrTooManyRequests {
  error: ErrTooManyRequestsError;
}

/**
 * A machine readable error code.
 */
export type ErrInternalServerErrorErrorCode =
  (typeof ErrInternalServerErrorErrorCode)[keyof typeof ErrInternalServerErrorErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ErrInternalServerErrorErrorCode = {
  INTERNAL_SERVER_ERROR: "INTERNAL_SERVER_ERROR",
} as const;

export type ErrInternalServerErrorError = {
  /** A machine readable error code. */
  code: ErrInternalServerErrorErrorCode;
  /** A link to our documentation with more details about this error code */
  docs: string;
  /** A human readable explanation of what went wrong */
  message: string;
  /** Please always include the requestId in your error report */
  requestId: string;
};

export interface ErrInternalServerError {
  error: ErrInternalServerErrorError;
}

export type ListStreamsParams = {
  limit: string;
  page: string;
  platform?: ListStreamsPlatform;
  status?: ListStreamsStatus;
  startedAt?: string;
  endedAt?: string;
  languageCode?: string;
  orderBy?: ListStreamsOrderBy;
};

export type ListStreamsPlatform =
  (typeof ListStreamsPlatform)[keyof typeof ListStreamsPlatform];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListStreamsPlatform = {
  youtube: "youtube",
  twitch: "twitch",
  twitcasting: "twitcasting",
  niconico: "niconico",
  unknown: "unknown",
} as const;

export type ListStreamsStatus =
  (typeof ListStreamsStatus)[keyof typeof ListStreamsStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListStreamsStatus = {
  live: "live",
  upcoming: "upcoming",
  ended: "ended",
  unknown: "unknown",
} as const;

export type ListStreamsOrderBy =
  (typeof ListStreamsOrderBy)[keyof typeof ListStreamsOrderBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListStreamsOrderBy = {
  asc: "asc",
  desc: "desc",
} as const;

export type ListStreams200StreamsItemLanguageCode =
  (typeof ListStreams200StreamsItemLanguageCode)[keyof typeof ListStreams200StreamsItemLanguageCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListStreams200StreamsItemLanguageCode = {
  en: "en",
  ja: "ja",
  fr: "fr",
  de: "de",
  es: "es",
  cn: "cn",
  tw: "tw",
  ko: "ko",
  default: "default",
} as const;

export type ListStreams200StreamsItemPlatform =
  (typeof ListStreams200StreamsItemPlatform)[keyof typeof ListStreams200StreamsItemPlatform];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListStreams200StreamsItemPlatform = {
  youtube: "youtube",
  twitch: "twitch",
  twitcasting: "twitcasting",
  niconico: "niconico",
  unknown: "unknown",
} as const;

export type ListStreams200StreamsItemStatus =
  (typeof ListStreams200StreamsItemStatus)[keyof typeof ListStreams200StreamsItemStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListStreams200StreamsItemStatus = {
  live: "live",
  upcoming: "upcoming",
  ended: "ended",
  unknown: "unknown",
} as const;

/**
 * Stream
 */
export type ListStreams200StreamsItem = {
  id: string;
  rawId: string;
  title: string;
  languageCode: ListStreams200StreamsItemLanguageCode;
  rawChannelID: string;
  description: string;
  publishedAt: string;
  platform: ListStreams200StreamsItemPlatform;
  tags: string[];
  thumbnailURL: string;
  creatorName?: string;
  creatorThumbnailURL?: string;
  /** @minimum 0 */
  viewCount: number;
  link?: string;
  deleted?: boolean;
  translated?: boolean;
  status: ListStreams200StreamsItemStatus;
  /** @nullable */
  startedAt: string | null;
  /** @nullable */
  endedAt: string | null;
};

export type ListStreams200Pagination = {
  /** Current Page */
  currentPage: number;
  /** Previous Page */
  prevPage?: number;
  /** Next Page */
  nextPage?: number;
  /** Total Pages */
  totalPage: number;
  /** Total Count */
  totalCount: number;
  /** Has Next */
  hasNext: boolean;
};

export type ListStreams200 = {
  streams: ListStreams200StreamsItem[];
  pagination: ListStreams200Pagination;
};

export type ListCreatorsParams = {
  limit: string;
  page: string;
  memberType?: ListCreatorsMemberType;
};

export type ListCreatorsMemberType =
  (typeof ListCreatorsMemberType)[keyof typeof ListCreatorsMemberType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreatorsMemberType = {
  vspo_jp: "vspo_jp",
  vspo_en: "vspo_en",
  vspo_ch: "vspo_ch",
  general: "general",
} as const;

export type ListCreators200CreatorsItemMemberType =
  (typeof ListCreators200CreatorsItemMemberType)[keyof typeof ListCreators200CreatorsItemMemberType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListCreators200CreatorsItemMemberType = {
  vspo_jp: "vspo_jp",
  vspo_en: "vspo_en",
  vspo_ch: "vspo_ch",
  general: "general",
} as const;

/**
 * @nullable
 */
export type ListCreators200CreatorsItemChannelYoutube = {
  rawId: string;
  name: string;
  /** @nullable */
  description: string | null;
  thumbnailURL: string;
  /** @nullable */
  publishedAt: string | null;
  /** @nullable */
  subscriberCount: number | null;
} | null;

/**
 * @nullable
 */
export type ListCreators200CreatorsItemChannelTwitch = {
  rawId: string;
  name: string;
  /** @nullable */
  description: string | null;
  thumbnailURL: string;
  /** @nullable */
  publishedAt: string | null;
  /** @nullable */
  subscriberCount: number | null;
} | null;

/**
 * @nullable
 */
export type ListCreators200CreatorsItemChannelTwitCasting = {
  rawId: string;
  name: string;
  /** @nullable */
  description: string | null;
  thumbnailURL: string;
  /** @nullable */
  publishedAt: string | null;
  /** @nullable */
  subscriberCount: number | null;
} | null;

/**
 * @nullable
 */
export type ListCreators200CreatorsItemChannelNiconico = {
  rawId: string;
  name: string;
  /** @nullable */
  description: string | null;
  thumbnailURL: string;
  /** @nullable */
  publishedAt: string | null;
  /** @nullable */
  subscriberCount: number | null;
} | null;

/**
 * @nullable
 */
export type ListCreators200CreatorsItemChannel = {
  id: string;
  creatorID: string;
  /** @nullable */
  youtube: ListCreators200CreatorsItemChannelYoutube;
  /** @nullable */
  twitch: ListCreators200CreatorsItemChannelTwitch;
  /** @nullable */
  twitCasting: ListCreators200CreatorsItemChannelTwitCasting;
  /** @nullable */
  niconico: ListCreators200CreatorsItemChannelNiconico;
} | null;

export type ListCreators200CreatorsItem = {
  id: string;
  name: string;
  memberType: ListCreators200CreatorsItemMemberType;
  thumbnailURL: string;
  /** @nullable */
  channel: ListCreators200CreatorsItemChannel;
};

export type ListCreators200Pagination = {
  /** Current Page */
  currentPage: number;
  /** Previous Page */
  prevPage?: number;
  /** Next Page */
  nextPage?: number;
  /** Total Pages */
  totalPage: number;
  /** Total Count */
  totalCount: number;
  /** Has Next */
  hasNext: boolean;
};

export type ListCreators200 = {
  creators: ListCreators200CreatorsItem[];
  pagination: ListCreators200Pagination;
};

export type PostStreamBody = {
  streamIds: string[];
};

export type PostStream200VideosItemLanguageCode =
  (typeof PostStream200VideosItemLanguageCode)[keyof typeof PostStream200VideosItemLanguageCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostStream200VideosItemLanguageCode = {
  en: "en",
  ja: "ja",
  fr: "fr",
  de: "de",
  es: "es",
  cn: "cn",
  tw: "tw",
  ko: "ko",
  default: "default",
} as const;

export type PostStream200VideosItemPlatform =
  (typeof PostStream200VideosItemPlatform)[keyof typeof PostStream200VideosItemPlatform];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostStream200VideosItemPlatform = {
  youtube: "youtube",
  twitch: "twitch",
  twitcasting: "twitcasting",
  niconico: "niconico",
  unknown: "unknown",
} as const;

export type PostStream200VideosItemStatus =
  (typeof PostStream200VideosItemStatus)[keyof typeof PostStream200VideosItemStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostStream200VideosItemStatus = {
  live: "live",
  upcoming: "upcoming",
  ended: "ended",
  unknown: "unknown",
} as const;

/**
 * Stream
 */
export type PostStream200VideosItem = {
  id: string;
  rawId: string;
  title: string;
  languageCode: PostStream200VideosItemLanguageCode;
  rawChannelID: string;
  description: string;
  publishedAt: string;
  platform: PostStream200VideosItemPlatform;
  tags: string[];
  thumbnailURL: string;
  creatorName?: string;
  creatorThumbnailURL?: string;
  /** @minimum 0 */
  viewCount: number;
  link?: string;
  deleted?: boolean;
  translated?: boolean;
  status: PostStream200VideosItemStatus;
  /** @nullable */
  startedAt: string | null;
  /** @nullable */
  endedAt: string | null;
};

export type PostStream200 = {
  videos: PostStream200VideosItem[];
};

export type ListClipsParams = {
  limit: string;
  page: string;
  platform?: ListClipsPlatform;
  clipType?: ListClipsClipType;
  languageCode?: string;
  orderBy?: ListClipsOrderBy;
};

export type ListClipsPlatform =
  (typeof ListClipsPlatform)[keyof typeof ListClipsPlatform];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListClipsPlatform = {
  youtube: "youtube",
  twitch: "twitch",
  twitcasting: "twitcasting",
  niconico: "niconico",
  unknown: "unknown",
} as const;

export type ListClipsClipType =
  (typeof ListClipsClipType)[keyof typeof ListClipsClipType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListClipsClipType = {
  clip: "clip",
  short: "short",
} as const;

export type ListClipsOrderBy =
  (typeof ListClipsOrderBy)[keyof typeof ListClipsOrderBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListClipsOrderBy = {
  asc: "asc",
  desc: "desc",
} as const;

export type ListClips200ClipsItemLanguageCode =
  (typeof ListClips200ClipsItemLanguageCode)[keyof typeof ListClips200ClipsItemLanguageCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListClips200ClipsItemLanguageCode = {
  en: "en",
  ja: "ja",
  fr: "fr",
  de: "de",
  es: "es",
  cn: "cn",
  tw: "tw",
  ko: "ko",
  default: "default",
} as const;

export type ListClips200ClipsItemPlatform =
  (typeof ListClips200ClipsItemPlatform)[keyof typeof ListClips200ClipsItemPlatform];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListClips200ClipsItemPlatform = {
  youtube: "youtube",
  twitch: "twitch",
  twitcasting: "twitcasting",
  niconico: "niconico",
  unknown: "unknown",
} as const;

export type ListClips200ClipsItemType =
  (typeof ListClips200ClipsItemType)[keyof typeof ListClips200ClipsItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListClips200ClipsItemType = {
  short: "short",
  clip: "clip",
} as const;

/**
 * Clip
 */
export type ListClips200ClipsItem = {
  id: string;
  rawId: string;
  title: string;
  languageCode: ListClips200ClipsItemLanguageCode;
  rawChannelID: string;
  description: string;
  publishedAt: string;
  platform: ListClips200ClipsItemPlatform;
  tags: string[];
  thumbnailURL: string;
  creatorName?: string;
  creatorThumbnailURL?: string;
  /** @minimum 0 */
  viewCount: number;
  link?: string;
  deleted?: boolean;
  translated?: boolean;
  type: ListClips200ClipsItemType;
};

export type ListClips200Pagination = {
  /** Current Page */
  currentPage: number;
  /** Previous Page */
  prevPage?: number;
  /** Next Page */
  nextPage?: number;
  /** Total Pages */
  totalPage: number;
  /** Total Count */
  totalCount: number;
  /** Has Next */
  hasNext: boolean;
};

export type ListClips200 = {
  clips: ListClips200ClipsItem[];
  pagination: ListClips200Pagination;
};

export type ListEventsParams = {
  limit: string;
  page: string;
  visibility?: ListEventsVisibility;
  orderBy?: ListEventsOrderBy;
  startAt?: string;
  endAt?: string;
};

export type ListEventsVisibility =
  (typeof ListEventsVisibility)[keyof typeof ListEventsVisibility];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListEventsVisibility = {
  public: "public",
  private: "private",
  internal: "internal",
} as const;

export type ListEventsOrderBy =
  (typeof ListEventsOrderBy)[keyof typeof ListEventsOrderBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListEventsOrderBy = {
  asc: "asc",
  desc: "desc",
} as const;

/**
 * Event visibility status
 */
export type ListEvents200EventsItemVisibility =
  (typeof ListEvents200EventsItemVisibility)[keyof typeof ListEvents200EventsItemVisibility];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListEvents200EventsItemVisibility = {
  public: "public",
  private: "private",
  internal: "internal",
} as const;

export type ListEvents200EventsItem = {
  /** Event ID */
  id: string;
  /** Event title */
  title: string;
  /** Storage file ID containing event details */
  storageFileId: string;
  /** Event start datetime (ISO format) */
  startAt?: string;
  /** Event end datetime (ISO format) */
  endAt?: string;
  /** Event visibility status */
  visibility: ListEvents200EventsItemVisibility;
  /** Creation datetime */
  createdAt: string;
  /** Last update datetime */
  updatedAt: string;
};

export type ListEvents200Pagination = {
  /** Current Page */
  currentPage: number;
  /** Previous Page */
  prevPage?: number;
  /** Next Page */
  nextPage?: number;
  /** Total Pages */
  totalPage: number;
  /** Total Count */
  totalCount: number;
  /** Has Next */
  hasNext: boolean;
};

export type ListEvents200 = {
  events: ListEvents200EventsItem[];
  pagination: ListEvents200Pagination;
};

/**
 * Event visibility status
 */
export type CreateEventBodyVisibility =
  (typeof CreateEventBodyVisibility)[keyof typeof CreateEventBodyVisibility];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateEventBodyVisibility = {
  public: "public",
  private: "private",
  internal: "internal",
} as const;

export type CreateEventBody = {
  /** Event title */
  title: string;
  /** Storage file ID containing event details */
  storageFileId: string;
  /** Event start datetime (ISO format) */
  startAt?: string;
  /** Event end datetime (ISO format) */
  endAt?: string;
  /** Event visibility status */
  visibility?: CreateEventBodyVisibility;
};

/**
 * Event visibility status
 */
export type CreateEvent201Visibility =
  (typeof CreateEvent201Visibility)[keyof typeof CreateEvent201Visibility];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateEvent201Visibility = {
  public: "public",
  private: "private",
  internal: "internal",
} as const;

export type CreateEvent201 = {
  /** Event ID */
  id: string;
  /** Event title */
  title: string;
  /** Storage file ID containing event details */
  storageFileId: string;
  /** Event start datetime (ISO format) */
  startAt?: string;
  /** Event end datetime (ISO format) */
  endAt?: string;
  /** Event visibility status */
  visibility: CreateEvent201Visibility;
  /** Creation datetime */
  createdAt: string;
  /** Last update datetime */
  updatedAt: string;
};

/**
 * Event visibility status
 */
export type GetEvent200Visibility =
  (typeof GetEvent200Visibility)[keyof typeof GetEvent200Visibility];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetEvent200Visibility = {
  public: "public",
  private: "private",
  internal: "internal",
} as const;

export type GetEvent200 = {
  /** Event ID */
  id: string;
  /** Event title */
  title: string;
  /** Storage file ID containing event details */
  storageFileId: string;
  /** Event start datetime (ISO format) */
  startAt?: string;
  /** Event end datetime (ISO format) */
  endAt?: string;
  /** Event visibility status */
  visibility: GetEvent200Visibility;
  /** Creation datetime */
  createdAt: string;
  /** Last update datetime */
  updatedAt: string;
};

export const listStreams = <TData = AxiosResponse<ListStreams200>>(
  params: ListStreamsParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/streams`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const listCreators = <TData = AxiosResponse<ListCreators200>>(
  params: ListCreatorsParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/creators`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const postStream = <TData = AxiosResponse<PostStream200>>(
  postStreamBody: PostStreamBody,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/api/streams/search`, postStreamBody, options);
};

export const listClips = <TData = AxiosResponse<ListClips200>>(
  params: ListClipsParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/clips`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const listEvents = <TData = AxiosResponse<ListEvents200>>(
  params: ListEventsParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/events`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const createEvent = <TData = AxiosResponse<CreateEvent201>>(
  createEventBody: CreateEventBody,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/api/events`, createEventBody, options);
};

export const getEvent = <TData = AxiosResponse<GetEvent200>>(
  id: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/api/events/${id}`, options);
};

export type ListStreamsResult = AxiosResponse<ListStreams200>;
export type ListCreatorsResult = AxiosResponse<ListCreators200>;
export type PostStreamResult = AxiosResponse<PostStream200>;
export type ListClipsResult = AxiosResponse<ListClips200>;
export type ListEventsResult = AxiosResponse<ListEvents200>;
export type CreateEventResult = AxiosResponse<CreateEvent201>;
export type GetEventResult = AxiosResponse<GetEvent200>;
