// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// Encode encodes ChannelsPostOKApplicationJSON as json.
func (s ChannelsPostOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ChannelsPostOKApplicationJSON from json.
func (s *ChannelsPostOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChannelsPostOKApplicationJSON to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ChannelsPostOKApplicationJSON(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChannelsPostOKApplicationJSON) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChannelsPostOKApplicationJSON) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ChannelsPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ChannelsPostReq) encodeFields(e *jx.Encoder) {
	{
		if s.PlatformType.Set {
			e.FieldStart("platform_type")
			s.PlatformType.Encode(e)
		}
	}
	{
		if s.Period.Set {
			e.FieldStart("period")
			s.Period.Encode(e)
		}
	}
}

var jsonFieldsNameOfChannelsPostReq = [2]string{
	0: "platform_type",
	1: "period",
}

// Decode decodes ChannelsPostReq from json.
func (s *ChannelsPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChannelsPostReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "platform_type":
			if err := func() error {
				s.PlatformType.Reset()
				if err := s.PlatformType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_type\"")
			}
		case "period":
			if err := func() error {
				s.Period.Reset()
				if err := s.Period.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"period\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ChannelsPostReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ChannelsPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChannelsPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChannelsPostReqPeriod as json.
func (s ChannelsPostReqPeriod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChannelsPostReqPeriod from json.
func (s *ChannelsPostReqPeriod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChannelsPostReqPeriod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChannelsPostReqPeriod(v) {
	case ChannelsPostReqPeriodAll:
		*s = ChannelsPostReqPeriodAll
	case ChannelsPostReqPeriodDay:
		*s = ChannelsPostReqPeriodDay
	case ChannelsPostReqPeriodMonth:
		*s = ChannelsPostReqPeriodMonth
	case ChannelsPostReqPeriodWeek:
		*s = ChannelsPostReqPeriodWeek
	default:
		*s = ChannelsPostReqPeriod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChannelsPostReqPeriod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChannelsPostReqPeriod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChannelsPostReqPlatformType as json.
func (s ChannelsPostReqPlatformType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChannelsPostReqPlatformType from json.
func (s *ChannelsPostReqPlatformType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChannelsPostReqPlatformType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChannelsPostReqPlatformType(v) {
	case ChannelsPostReqPlatformTypeAll:
		*s = ChannelsPostReqPlatformTypeAll
	case ChannelsPostReqPlatformTypeYoutube:
		*s = ChannelsPostReqPlatformTypeYoutube
	case ChannelsPostReqPlatformTypeTwitch:
		*s = ChannelsPostReqPlatformTypeTwitch
	case ChannelsPostReqPlatformTypeTwitcasting:
		*s = ChannelsPostReqPlatformTypeTwitcasting
	case ChannelsPostReqPlatformTypeNiconico:
		*s = ChannelsPostReqPlatformTypeNiconico
	default:
		*s = ChannelsPostReqPlatformType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChannelsPostReqPlatformType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChannelsPostReqPlatformType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChannelsPostReqPeriod as json.
func (o OptChannelsPostReqPeriod) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChannelsPostReqPeriod from json.
func (o *OptChannelsPostReqPeriod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptChannelsPostReqPeriod to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptChannelsPostReqPeriod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptChannelsPostReqPeriod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChannelsPostReqPlatformType as json.
func (o OptChannelsPostReqPlatformType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChannelsPostReqPlatformType from json.
func (o *OptChannelsPostReqPlatformType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptChannelsPostReqPlatformType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptChannelsPostReqPlatformType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptChannelsPostReqPlatformType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VideosPostReqPeriod as json.
func (o OptVideosPostReqPeriod) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes VideosPostReqPeriod from json.
func (o *OptVideosPostReqPeriod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVideosPostReqPeriod to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVideosPostReqPeriod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVideosPostReqPeriod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VideosPostReqPlatformType as json.
func (o OptVideosPostReqPlatformType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes VideosPostReqPlatformType from json.
func (o *OptVideosPostReqPlatformType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVideosPostReqPlatformType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVideosPostReqPlatformType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVideosPostReqPlatformType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VideosPostReqVideoType as json.
func (o OptVideosPostReqVideoType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes VideosPostReqVideoType from json.
func (o *OptVideosPostReqVideoType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVideosPostReqVideoType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVideosPostReqVideoType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVideosPostReqVideoType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VideosPostOKApplicationJSON as json.
func (s VideosPostOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes VideosPostOKApplicationJSON from json.
func (s *VideosPostOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VideosPostOKApplicationJSON to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = VideosPostOKApplicationJSON(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VideosPostOKApplicationJSON) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VideosPostOKApplicationJSON) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VideosPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VideosPostReq) encodeFields(e *jx.Encoder) {
	{
		if s.PlatformType.Set {
			e.FieldStart("platform_type")
			s.PlatformType.Encode(e)
		}
	}
	{
		if s.Period.Set {
			e.FieldStart("period")
			s.Period.Encode(e)
		}
	}
	{
		if s.VideoType.Set {
			e.FieldStart("video_type")
			s.VideoType.Encode(e)
		}
	}
}

var jsonFieldsNameOfVideosPostReq = [3]string{
	0: "platform_type",
	1: "period",
	2: "video_type",
}

// Decode decodes VideosPostReq from json.
func (s *VideosPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VideosPostReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "platform_type":
			if err := func() error {
				s.PlatformType.Reset()
				if err := s.PlatformType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_type\"")
			}
		case "period":
			if err := func() error {
				s.Period.Reset()
				if err := s.Period.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"period\"")
			}
		case "video_type":
			if err := func() error {
				s.VideoType.Reset()
				if err := s.VideoType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VideosPostReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VideosPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VideosPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VideosPostReqPeriod as json.
func (s VideosPostReqPeriod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VideosPostReqPeriod from json.
func (s *VideosPostReqPeriod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VideosPostReqPeriod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VideosPostReqPeriod(v) {
	case VideosPostReqPeriodAll:
		*s = VideosPostReqPeriodAll
	case VideosPostReqPeriodDay:
		*s = VideosPostReqPeriodDay
	case VideosPostReqPeriodMonth:
		*s = VideosPostReqPeriodMonth
	case VideosPostReqPeriodWeek:
		*s = VideosPostReqPeriodWeek
	default:
		*s = VideosPostReqPeriod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VideosPostReqPeriod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VideosPostReqPeriod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VideosPostReqPlatformType as json.
func (s VideosPostReqPlatformType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VideosPostReqPlatformType from json.
func (s *VideosPostReqPlatformType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VideosPostReqPlatformType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VideosPostReqPlatformType(v) {
	case VideosPostReqPlatformTypeAll:
		*s = VideosPostReqPlatformTypeAll
	case VideosPostReqPlatformTypeYoutube:
		*s = VideosPostReqPlatformTypeYoutube
	case VideosPostReqPlatformTypeTwitch:
		*s = VideosPostReqPlatformTypeTwitch
	case VideosPostReqPlatformTypeTwitcasting:
		*s = VideosPostReqPlatformTypeTwitcasting
	case VideosPostReqPlatformTypeNiconico:
		*s = VideosPostReqPlatformTypeNiconico
	default:
		*s = VideosPostReqPlatformType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VideosPostReqPlatformType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VideosPostReqPlatformType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VideosPostReqVideoType as json.
func (s VideosPostReqVideoType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VideosPostReqVideoType from json.
func (s *VideosPostReqVideoType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VideosPostReqVideoType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VideosPostReqVideoType(v) {
	case VideosPostReqVideoTypeAll:
		*s = VideosPostReqVideoTypeAll
	case VideosPostReqVideoTypeVspoBroadcast:
		*s = VideosPostReqVideoTypeVspoBroadcast
	case VideosPostReqVideoTypeClip:
		*s = VideosPostReqVideoTypeClip
	case VideosPostReqVideoTypeFreechat:
		*s = VideosPostReqVideoTypeFreechat
	default:
		*s = VideosPostReqVideoType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VideosPostReqVideoType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VideosPostReqVideoType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
