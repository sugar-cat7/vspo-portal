// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// Encode encodes CronCreatorsPostBadRequest as json.
func (s *CronCreatorsPostBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes CronCreatorsPostBadRequest from json.
func (s *CronCreatorsPostBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronCreatorsPostBadRequest to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CronCreatorsPostBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CronCreatorsPostBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronCreatorsPostBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronCreatorsPostForbidden as json.
func (s *CronCreatorsPostForbidden) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes CronCreatorsPostForbidden from json.
func (s *CronCreatorsPostForbidden) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronCreatorsPostForbidden to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CronCreatorsPostForbidden(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CronCreatorsPostForbidden) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronCreatorsPostForbidden) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronCreatorsPostInternalServerError as json.
func (s *CronCreatorsPostInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes CronCreatorsPostInternalServerError from json.
func (s *CronCreatorsPostInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronCreatorsPostInternalServerError to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CronCreatorsPostInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CronCreatorsPostInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronCreatorsPostInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronCreatorsPostNotFound as json.
func (s *CronCreatorsPostNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes CronCreatorsPostNotFound from json.
func (s *CronCreatorsPostNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronCreatorsPostNotFound to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CronCreatorsPostNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CronCreatorsPostNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronCreatorsPostNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronCreatorsPostOK as json.
func (s *CronCreatorsPostOK) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes CronCreatorsPostOK from json.
func (s *CronCreatorsPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronCreatorsPostOK to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CronCreatorsPostOK(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CronCreatorsPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronCreatorsPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CronCreatorsPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CronCreatorsPostReq) encodeFields(e *jx.Encoder) {
	{
		if s.PlatformType.Set {
			e.FieldStart("platform_type")
			s.PlatformType.Encode(e)
		}
	}
	{
		if s.Period.Set {
			e.FieldStart("period")
			s.Period.Encode(e)
		}
	}
	{
		if s.CreatorType.Set {
			e.FieldStart("creator_type")
			s.CreatorType.Encode(e)
		}
	}
}

var jsonFieldsNameOfCronCreatorsPostReq = [3]string{
	0: "platform_type",
	1: "period",
	2: "creator_type",
}

// Decode decodes CronCreatorsPostReq from json.
func (s *CronCreatorsPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronCreatorsPostReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "platform_type":
			if err := func() error {
				s.PlatformType.Reset()
				if err := s.PlatformType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_type\"")
			}
		case "period":
			if err := func() error {
				s.Period.Reset()
				if err := s.Period.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"period\"")
			}
		case "creator_type":
			if err := func() error {
				s.CreatorType.Reset()
				if err := s.CreatorType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"creator_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CronCreatorsPostReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CronCreatorsPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronCreatorsPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronCreatorsPostReqCreatorType as json.
func (s CronCreatorsPostReqCreatorType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CronCreatorsPostReqCreatorType from json.
func (s *CronCreatorsPostReqCreatorType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronCreatorsPostReqCreatorType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CronCreatorsPostReqCreatorType(v) {
	case CronCreatorsPostReqCreatorTypeVspo:
		*s = CronCreatorsPostReqCreatorTypeVspo
	case CronCreatorsPostReqCreatorTypeGeneral:
		*s = CronCreatorsPostReqCreatorTypeGeneral
	default:
		*s = CronCreatorsPostReqCreatorType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CronCreatorsPostReqCreatorType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronCreatorsPostReqCreatorType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronCreatorsPostReqPeriod as json.
func (s CronCreatorsPostReqPeriod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CronCreatorsPostReqPeriod from json.
func (s *CronCreatorsPostReqPeriod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronCreatorsPostReqPeriod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CronCreatorsPostReqPeriod(v) {
	case CronCreatorsPostReqPeriodDay:
		*s = CronCreatorsPostReqPeriodDay
	case CronCreatorsPostReqPeriodWeek:
		*s = CronCreatorsPostReqPeriodWeek
	case CronCreatorsPostReqPeriodMonth:
		*s = CronCreatorsPostReqPeriodMonth
	case CronCreatorsPostReqPeriodYear:
		*s = CronCreatorsPostReqPeriodYear
	default:
		*s = CronCreatorsPostReqPeriod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CronCreatorsPostReqPeriod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronCreatorsPostReqPeriod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronCreatorsPostReqPlatformType as json.
func (s CronCreatorsPostReqPlatformType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CronCreatorsPostReqPlatformType from json.
func (s *CronCreatorsPostReqPlatformType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronCreatorsPostReqPlatformType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CronCreatorsPostReqPlatformType(v) {
	case CronCreatorsPostReqPlatformTypeYoutube:
		*s = CronCreatorsPostReqPlatformTypeYoutube
	case CronCreatorsPostReqPlatformTypeTwitch:
		*s = CronCreatorsPostReqPlatformTypeTwitch
	case CronCreatorsPostReqPlatformTypeTwitcasting:
		*s = CronCreatorsPostReqPlatformTypeTwitcasting
	case CronCreatorsPostReqPlatformTypeNiconico:
		*s = CronCreatorsPostReqPlatformTypeNiconico
	default:
		*s = CronCreatorsPostReqPlatformType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CronCreatorsPostReqPlatformType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronCreatorsPostReqPlatformType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronCreatorsPostUnauthorized as json.
func (s *CronCreatorsPostUnauthorized) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes CronCreatorsPostUnauthorized from json.
func (s *CronCreatorsPostUnauthorized) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronCreatorsPostUnauthorized to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CronCreatorsPostUnauthorized(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CronCreatorsPostUnauthorized) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronCreatorsPostUnauthorized) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CronResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CronResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfCronResponse = [1]string{
	0: "message",
}

// Decode decodes CronResponse from json.
func (s *CronResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CronResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CronResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronVideosPostBadRequest as json.
func (s *CronVideosPostBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes CronVideosPostBadRequest from json.
func (s *CronVideosPostBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronVideosPostBadRequest to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CronVideosPostBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CronVideosPostBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronVideosPostBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronVideosPostForbidden as json.
func (s *CronVideosPostForbidden) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes CronVideosPostForbidden from json.
func (s *CronVideosPostForbidden) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronVideosPostForbidden to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CronVideosPostForbidden(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CronVideosPostForbidden) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronVideosPostForbidden) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronVideosPostInternalServerError as json.
func (s *CronVideosPostInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes CronVideosPostInternalServerError from json.
func (s *CronVideosPostInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronVideosPostInternalServerError to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CronVideosPostInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CronVideosPostInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronVideosPostInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronVideosPostNotFound as json.
func (s *CronVideosPostNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes CronVideosPostNotFound from json.
func (s *CronVideosPostNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronVideosPostNotFound to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CronVideosPostNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CronVideosPostNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronVideosPostNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronVideosPostOK as json.
func (s *CronVideosPostOK) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes CronVideosPostOK from json.
func (s *CronVideosPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronVideosPostOK to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CronVideosPostOK(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CronVideosPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronVideosPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CronVideosPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CronVideosPostReq) encodeFields(e *jx.Encoder) {
	{
		if s.PlatformType != nil {
			e.FieldStart("platform_type")
			e.ArrStart()
			for _, elem := range s.PlatformType {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Period.Set {
			e.FieldStart("period")
			s.Period.Encode(e)
		}
	}
	{
		if s.VideoType.Set {
			e.FieldStart("video_type")
			s.VideoType.Encode(e)
		}
	}
}

var jsonFieldsNameOfCronVideosPostReq = [3]string{
	0: "platform_type",
	1: "period",
	2: "video_type",
}

// Decode decodes CronVideosPostReq from json.
func (s *CronVideosPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronVideosPostReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "platform_type":
			if err := func() error {
				s.PlatformType = make([]CronVideosPostReqPlatformTypeItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CronVideosPostReqPlatformTypeItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PlatformType = append(s.PlatformType, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_type\"")
			}
		case "period":
			if err := func() error {
				s.Period.Reset()
				if err := s.Period.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"period\"")
			}
		case "video_type":
			if err := func() error {
				s.VideoType.Reset()
				if err := s.VideoType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CronVideosPostReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CronVideosPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronVideosPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronVideosPostReqPeriod as json.
func (s CronVideosPostReqPeriod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CronVideosPostReqPeriod from json.
func (s *CronVideosPostReqPeriod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronVideosPostReqPeriod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CronVideosPostReqPeriod(v) {
	case CronVideosPostReqPeriodDay:
		*s = CronVideosPostReqPeriodDay
	case CronVideosPostReqPeriodMonth:
		*s = CronVideosPostReqPeriodMonth
	case CronVideosPostReqPeriodWeek:
		*s = CronVideosPostReqPeriodWeek
	default:
		*s = CronVideosPostReqPeriod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CronVideosPostReqPeriod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronVideosPostReqPeriod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronVideosPostReqPlatformTypeItem as json.
func (s CronVideosPostReqPlatformTypeItem) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CronVideosPostReqPlatformTypeItem from json.
func (s *CronVideosPostReqPlatformTypeItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronVideosPostReqPlatformTypeItem to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CronVideosPostReqPlatformTypeItem(v) {
	case CronVideosPostReqPlatformTypeItemYoutube:
		*s = CronVideosPostReqPlatformTypeItemYoutube
	case CronVideosPostReqPlatformTypeItemTwitch:
		*s = CronVideosPostReqPlatformTypeItemTwitch
	case CronVideosPostReqPlatformTypeItemTwitcasting:
		*s = CronVideosPostReqPlatformTypeItemTwitcasting
	case CronVideosPostReqPlatformTypeItemNiconico:
		*s = CronVideosPostReqPlatformTypeItemNiconico
	default:
		*s = CronVideosPostReqPlatformTypeItem(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CronVideosPostReqPlatformTypeItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronVideosPostReqPlatformTypeItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronVideosPostReqVideoType as json.
func (s CronVideosPostReqVideoType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CronVideosPostReqVideoType from json.
func (s *CronVideosPostReqVideoType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronVideosPostReqVideoType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CronVideosPostReqVideoType(v) {
	case CronVideosPostReqVideoTypeVspoBroadcast:
		*s = CronVideosPostReqVideoTypeVspoBroadcast
	case CronVideosPostReqVideoTypeClip:
		*s = CronVideosPostReqVideoTypeClip
	case CronVideosPostReqVideoTypeFreechat:
		*s = CronVideosPostReqVideoTypeFreechat
	default:
		*s = CronVideosPostReqVideoType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CronVideosPostReqVideoType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronVideosPostReqVideoType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronVideosPostUnauthorized as json.
func (s *CronVideosPostUnauthorized) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes CronVideosPostUnauthorized from json.
func (s *CronVideosPostUnauthorized) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronVideosPostUnauthorized to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CronVideosPostUnauthorized(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CronVideosPostUnauthorized) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronVideosPostUnauthorized) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronCreatorsPostReqCreatorType as json.
func (o OptCronCreatorsPostReqCreatorType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CronCreatorsPostReqCreatorType from json.
func (o *OptCronCreatorsPostReqCreatorType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCronCreatorsPostReqCreatorType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCronCreatorsPostReqCreatorType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCronCreatorsPostReqCreatorType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronCreatorsPostReqPeriod as json.
func (o OptCronCreatorsPostReqPeriod) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CronCreatorsPostReqPeriod from json.
func (o *OptCronCreatorsPostReqPeriod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCronCreatorsPostReqPeriod to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCronCreatorsPostReqPeriod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCronCreatorsPostReqPeriod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronCreatorsPostReqPlatformType as json.
func (o OptCronCreatorsPostReqPlatformType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CronCreatorsPostReqPlatformType from json.
func (o *OptCronCreatorsPostReqPlatformType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCronCreatorsPostReqPlatformType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCronCreatorsPostReqPlatformType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCronCreatorsPostReqPlatformType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronVideosPostReqPeriod as json.
func (o OptCronVideosPostReqPeriod) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CronVideosPostReqPeriod from json.
func (o *OptCronVideosPostReqPeriod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCronVideosPostReqPeriod to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCronVideosPostReqPeriod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCronVideosPostReqPeriod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CronVideosPostReqVideoType as json.
func (o OptCronVideosPostReqVideoType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CronVideosPostReqVideoType from json.
func (o *OptCronVideosPostReqVideoType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCronVideosPostReqVideoType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCronVideosPostReqVideoType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCronVideosPostReqVideoType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
