// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"net/http"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// APICronCreatorsGetParams is parameters of GET /api/cron/creators operation.
type APICronCreatorsGetParams struct {
	// Comma-separated list of video platform types.
	PlatformType []APICronCreatorsGetPlatformTypeItem
	// Period for performing updates.
	Period APICronCreatorsGetPeriod
	// Comma-separated list of creator types.
	CreatorType []APICronCreatorsGetCreatorTypeItem
}

func unpackAPICronCreatorsGetParams(packed middleware.Parameters) (params APICronCreatorsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "platform_type",
			In:   "query",
		}
		params.PlatformType = packed[key].([]APICronCreatorsGetPlatformTypeItem)
	}
	{
		key := middleware.ParameterKey{
			Name: "period",
			In:   "query",
		}
		params.Period = packed[key].(APICronCreatorsGetPeriod)
	}
	{
		key := middleware.ParameterKey{
			Name: "creator_type",
			In:   "query",
		}
		params.CreatorType = packed[key].([]APICronCreatorsGetCreatorTypeItem)
	}
	return params
}

func decodeAPICronCreatorsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params APICronCreatorsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: platform_type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "platform_type",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotPlatformTypeVal APICronCreatorsGetPlatformTypeItem
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotPlatformTypeVal = APICronCreatorsGetPlatformTypeItem(c)
						return nil
					}(); err != nil {
						return err
					}
					params.PlatformType = append(params.PlatformType, paramsDotPlatformTypeVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.PlatformType == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range params.PlatformType {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "platform_type",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: period.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "period",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Period = APICronCreatorsGetPeriod(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Period.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "period",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: creator_type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "creator_type",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotCreatorTypeVal APICronCreatorsGetCreatorTypeItem
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotCreatorTypeVal = APICronCreatorsGetCreatorTypeItem(c)
						return nil
					}(); err != nil {
						return err
					}
					params.CreatorType = append(params.CreatorType, paramsDotCreatorTypeVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.CreatorType == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range params.CreatorType {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "creator_type",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// APICronVideosGetParams is parameters of GET /api/cron/videos operation.
type APICronVideosGetParams struct {
	// Comma-separated list of video platform types.
	PlatformType []APICronVideosGetPlatformTypeItem
	// Period for performing updates.
	Period APICronVideosGetPeriod
	// Type of the cron.
	VideoType APICronVideosGetVideoType
}

func unpackAPICronVideosGetParams(packed middleware.Parameters) (params APICronVideosGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "platform_type",
			In:   "query",
		}
		params.PlatformType = packed[key].([]APICronVideosGetPlatformTypeItem)
	}
	{
		key := middleware.ParameterKey{
			Name: "period",
			In:   "query",
		}
		params.Period = packed[key].(APICronVideosGetPeriod)
	}
	{
		key := middleware.ParameterKey{
			Name: "video_type",
			In:   "query",
		}
		params.VideoType = packed[key].(APICronVideosGetVideoType)
	}
	return params
}

func decodeAPICronVideosGetParams(args [0]string, argsEscaped bool, r *http.Request) (params APICronVideosGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: platform_type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "platform_type",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotPlatformTypeVal APICronVideosGetPlatformTypeItem
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotPlatformTypeVal = APICronVideosGetPlatformTypeItem(c)
						return nil
					}(); err != nil {
						return err
					}
					params.PlatformType = append(params.PlatformType, paramsDotPlatformTypeVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.PlatformType == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range params.PlatformType {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "platform_type",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: period.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "period",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Period = APICronVideosGetPeriod(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Period.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "period",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: video_type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "video_type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.VideoType = APICronVideosGetVideoType(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.VideoType.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "video_type",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
