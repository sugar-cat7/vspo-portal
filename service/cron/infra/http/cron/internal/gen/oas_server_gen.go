// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// APICronChannelsGet implements GET /api/cron/channels operation.
	//
	// Update channels.
	//
	// GET /api/cron/channels
	APICronChannelsGet(ctx context.Context, params APICronChannelsGetParams) (APICronChannelsGetRes, error)
	// APICronCreatorsGet implements GET /api/cron/creators operation.
	//
	// Creates creators by fetching from Youtube using provided Channel IDs.
	//
	// GET /api/cron/creators
	APICronCreatorsGet(ctx context.Context, params APICronCreatorsGetParams) (APICronCreatorsGetRes, error)
	// APICronVideosGet implements GET /api/cron/videos operation.
	//
	// Update videos related to a specific creator based on provided cronType.
	//
	// GET /api/cron/videos
	APICronVideosGet(ctx context.Context, params APICronVideosGetParams) (APICronVideosGetRes, error)
	// APIPingGet implements GET /api/ping operation.
	//
	// Returns a 200 status code if successful, or an error.
	//
	// GET /api/ping
	APIPingGet(ctx context.Context) (*APIPingGetOK, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
