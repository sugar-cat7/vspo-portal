// Code generated by MockGen. DO NOT EDIT.
// Source: twitch.go
//
// Generated by this command:
//
//	mockgen -source=twitch.go -destination=mock/twitch.go -package=mock_twitch
//

// Package mock_twitch is a generated GoMock package.
package mock_twitch

import (
	context "context"
	reflect "reflect"

	model "github.com/sugar-cat7/vspo-portal/service/cron/domain/model"
	twitch "github.com/sugar-cat7/vspo-portal/service/cron/domain/twitch"
	gomock "go.uber.org/mock/gomock"
)

// MockTwitchClient is a mock of TwitchClient interface.
type MockTwitchClient struct {
	ctrl     *gomock.Controller
	recorder *MockTwitchClientMockRecorder
}

// MockTwitchClientMockRecorder is the mock recorder for MockTwitchClient.
type MockTwitchClientMockRecorder struct {
	mock *MockTwitchClient
}

// NewMockTwitchClient creates a new mock instance.
func NewMockTwitchClient(ctrl *gomock.Controller) *MockTwitchClient {
	mock := &MockTwitchClient{ctrl: ctrl}
	mock.recorder = &MockTwitchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwitchClient) EXPECT() *MockTwitchClientMockRecorder {
	return m.recorder
}

// GetVideos mocks base method.
func (m *MockTwitchClient) GetVideos(ctx context.Context, param twitch.TwitchVideosParam) (model.Videos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideos", ctx, param)
	ret0, _ := ret[0].(model.Videos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideos indicates an expected call of GetVideos.
func (mr *MockTwitchClientMockRecorder) GetVideos(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideos", reflect.TypeOf((*MockTwitchClient)(nil).GetVideos), ctx, param)
}
