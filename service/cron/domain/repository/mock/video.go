// Code generated by MockGen. DO NOT EDIT.
// Source: video.go
//
// Generated by this command:
//
//	mockgen -source=video.go -destination=mock/video.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/sugar-cat7/vspo-portal/service/cron/domain/model"
	repository "github.com/sugar-cat7/vspo-portal/service/cron/domain/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockVideo is a mock of Video interface.
type MockVideo struct {
	ctrl     *gomock.Controller
	recorder *MockVideoMockRecorder
}

// MockVideoMockRecorder is the mock recorder for MockVideo.
type MockVideoMockRecorder struct {
	mock *MockVideo
}

// NewMockVideo creates a new mock instance.
func NewMockVideo(ctrl *gomock.Controller) *MockVideo {
	mock := &MockVideo{ctrl: ctrl}
	mock.recorder = &MockVideoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideo) EXPECT() *MockVideoMockRecorder {
	return m.recorder
}

// BatchDeleteInsert mocks base method.
func (m_2 *MockVideo) BatchDeleteInsert(ctx context.Context, m model.Videos) (model.Videos, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "BatchDeleteInsert", ctx, m)
	ret0, _ := ret[0].(model.Videos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteInsert indicates an expected call of BatchDeleteInsert.
func (mr *MockVideoMockRecorder) BatchDeleteInsert(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteInsert", reflect.TypeOf((*MockVideo)(nil).BatchDeleteInsert), ctx, m)
}

// Count mocks base method.
func (m *MockVideo) Count(ctx context.Context, query repository.ListVideosQuery) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, query)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockVideoMockRecorder) Count(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockVideo)(nil).Count), ctx, query)
}

// List mocks base method.
func (m *MockVideo) List(ctx context.Context, query repository.ListVideosQuery) (model.Videos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, query)
	ret0, _ := ret[0].(model.Videos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVideoMockRecorder) List(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVideo)(nil).List), ctx, query)
}
