// Code generated by MockGen. DO NOT EDIT.
// Source: channel.go
//
// Generated by this command:
//
//	mockgen -source=channel.go -destination=mock/channel.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/sugar-cat7/vspo-portal/service/cron/domain/model"
	repository "github.com/sugar-cat7/vspo-portal/service/cron/domain/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockChannel is a mock of Channel interface.
type MockChannel struct {
	ctrl     *gomock.Controller
	recorder *MockChannelMockRecorder
}

// MockChannelMockRecorder is the mock recorder for MockChannel.
type MockChannelMockRecorder struct {
	mock *MockChannel
}

// NewMockChannel creates a new mock instance.
func NewMockChannel(ctrl *gomock.Controller) *MockChannel {
	mock := &MockChannel{ctrl: ctrl}
	mock.recorder = &MockChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannel) EXPECT() *MockChannelMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m_2 *MockChannel) BatchCreate(ctx context.Context, m model.Channels) (model.Channels, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "BatchCreate", ctx, m)
	ret0, _ := ret[0].(model.Channels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockChannelMockRecorder) BatchCreate(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockChannel)(nil).BatchCreate), ctx, m)
}

// Exist mocks base method.
func (m *MockChannel) Exist(ctx context.Context, query repository.GetChannelQuery) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", ctx, query)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exist indicates an expected call of Exist.
func (mr *MockChannelMockRecorder) Exist(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockChannel)(nil).Exist), ctx, query)
}
