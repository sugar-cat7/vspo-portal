// Code generated by MockGen. DO NOT EDIT.
// Source: youtube.go
//
// Generated by this command:
//
//	mockgen -source=youtube.go -destination=mock/youtube.go -package=mock_youtube
//

// Package mock_youtube is a generated GoMock package.
package mock_youtube

import (
	context "context"
	reflect "reflect"

	model "github.com/sugar-cat7/vspo-portal/service/cron/domain/model"
	youtube "github.com/sugar-cat7/vspo-portal/service/cron/domain/youtube"
	gomock "go.uber.org/mock/gomock"
)

// MockYoutubeClient is a mock of YoutubeClient interface.
type MockYoutubeClient struct {
	ctrl     *gomock.Controller
	recorder *MockYoutubeClientMockRecorder
}

// MockYoutubeClientMockRecorder is the mock recorder for MockYoutubeClient.
type MockYoutubeClientMockRecorder struct {
	mock *MockYoutubeClient
}

// NewMockYoutubeClient creates a new mock instance.
func NewMockYoutubeClient(ctrl *gomock.Controller) *MockYoutubeClient {
	mock := &MockYoutubeClient{ctrl: ctrl}
	mock.recorder = &MockYoutubeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYoutubeClient) EXPECT() *MockYoutubeClientMockRecorder {
	return m.recorder
}

// Channels mocks base method.
func (m *MockYoutubeClient) Channels(ctx context.Context, param youtube.ChannelsParam) (model.Channels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channels", ctx, param)
	ret0, _ := ret[0].(model.Channels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Channels indicates an expected call of Channels.
func (mr *MockYoutubeClientMockRecorder) Channels(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channels", reflect.TypeOf((*MockYoutubeClient)(nil).Channels), ctx, param)
}

// GetVideos mocks base method.
func (m *MockYoutubeClient) GetVideos(ctx context.Context, param youtube.VideosParam) (model.Videos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideos", ctx, param)
	ret0, _ := ret[0].(model.Videos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideos indicates an expected call of GetVideos.
func (mr *MockYoutubeClientMockRecorder) GetVideos(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideos", reflect.TypeOf((*MockYoutubeClient)(nil).GetVideos), ctx, param)
}

// SearchVideos mocks base method.
func (m *MockYoutubeClient) SearchVideos(ctx context.Context, param youtube.SearchVideosParam) (model.Videos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVideos", ctx, param)
	ret0, _ := ret[0].(model.Videos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchVideos indicates an expected call of SearchVideos.
func (mr *MockYoutubeClientMockRecorder) SearchVideos(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVideos", reflect.TypeOf((*MockYoutubeClient)(nil).SearchVideos), ctx, param)
}
