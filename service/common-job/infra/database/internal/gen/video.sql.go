// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: video.sql

package db_sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countVideo = `-- name: CountVideo :one
SELECT COUNT(*)
FROM
    video
`

func (q *Queries) CountVideo(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countVideo)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteVideosByIDs = `-- name: DeleteVideosByIDs :exec
DELETE FROM video
WHERE id = ANY($1::text[])
RETURNING id, channel_id, platform_type, title, description, video_type, published_at, tags, thumbnail_url, is_deleted
`

func (q *Queries) DeleteVideosByIDs(ctx context.Context, ids []string) error {
	_, err := q.db.Exec(ctx, deleteVideosByIDs, ids)
	return err
}

const getVideosByIDs = `-- name: GetVideosByIDs :many
SELECT
     v.id, v.channel_id, v.platform_type, v.title, v.description, v.video_type, v.published_at, v.tags, v.thumbnail_url, v.is_deleted
FROM
    video v
WHERE
    id = ANY($1::text[])
`

type GetVideosByIDsRow struct {
	Video Video
}

func (q *Queries) GetVideosByIDs(ctx context.Context, ids []string) ([]GetVideosByIDsRow, error) {
	rows, err := q.db.Query(ctx, getVideosByIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVideosByIDsRow
	for rows.Next() {
		var i GetVideosByIDsRow
		if err := rows.Scan(
			&i.Video.ID,
			&i.Video.ChannelID,
			&i.Video.PlatformType,
			&i.Video.Title,
			&i.Video.Description,
			&i.Video.VideoType,
			&i.Video.PublishedAt,
			&i.Video.Tags,
			&i.Video.ThumbnailUrl,
			&i.Video.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideosByPlatformsWithStatus = `-- name: GetVideosByPlatformsWithStatus :many
SELECT
     v.id, v.channel_id, v.platform_type, v.title, v.description, v.video_type, v.published_at, v.tags, v.thumbnail_url, v.is_deleted, ss.id, ss.video_id, ss.creator_id, ss.status, ss.started_at, ss.ended_at, ss.view_count, ss.updated_at
FROM
    video v
INNER JOIN
    stream_status ss ON v.id = ss.video_id
WHERE
    platform_type = ANY($4::text[])
    AND video_type = $1
LIMIT $2 OFFSET $3
`

type GetVideosByPlatformsWithStatusParams struct {
	VideoType     string
	Limit         int32
	Offset        int32
	PlatformTypes []string
}

type GetVideosByPlatformsWithStatusRow struct {
	Video        Video
	StreamStatus StreamStatus
}

func (q *Queries) GetVideosByPlatformsWithStatus(ctx context.Context, arg GetVideosByPlatformsWithStatusParams) ([]GetVideosByPlatformsWithStatusRow, error) {
	rows, err := q.db.Query(ctx, getVideosByPlatformsWithStatus,
		arg.VideoType,
		arg.Limit,
		arg.Offset,
		arg.PlatformTypes,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVideosByPlatformsWithStatusRow
	for rows.Next() {
		var i GetVideosByPlatformsWithStatusRow
		if err := rows.Scan(
			&i.Video.ID,
			&i.Video.ChannelID,
			&i.Video.PlatformType,
			&i.Video.Title,
			&i.Video.Description,
			&i.Video.VideoType,
			&i.Video.PublishedAt,
			&i.Video.Tags,
			&i.Video.ThumbnailUrl,
			&i.Video.IsDeleted,
			&i.StreamStatus.ID,
			&i.StreamStatus.VideoID,
			&i.StreamStatus.CreatorID,
			&i.StreamStatus.Status,
			&i.StreamStatus.StartedAt,
			&i.StreamStatus.EndedAt,
			&i.StreamStatus.ViewCount,
			&i.StreamStatus.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideosByTimeRange = `-- name: GetVideosByTimeRange :many
SELECT
     v.id, v.channel_id, v.platform_type, v.title, v.description, v.video_type, v.published_at, v.tags, v.thumbnail_url, v.is_deleted, ss.id, ss.video_id, ss.creator_id, ss.status, ss.started_at, ss.ended_at, ss.view_count, ss.updated_at
FROM
    video v
INNER JOIN
    stream_status ss ON v.id = ss.video_id
WHERE
    ss.started_at >= $1
    AND ss.ended_at <= $2
`

type GetVideosByTimeRangeParams struct {
	StartedAt pgtype.Timestamptz
	EndedAt   pgtype.Timestamptz
}

type GetVideosByTimeRangeRow struct {
	Video        Video
	StreamStatus StreamStatus
}

func (q *Queries) GetVideosByTimeRange(ctx context.Context, arg GetVideosByTimeRangeParams) ([]GetVideosByTimeRangeRow, error) {
	rows, err := q.db.Query(ctx, getVideosByTimeRange, arg.StartedAt, arg.EndedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVideosByTimeRangeRow
	for rows.Next() {
		var i GetVideosByTimeRangeRow
		if err := rows.Scan(
			&i.Video.ID,
			&i.Video.ChannelID,
			&i.Video.PlatformType,
			&i.Video.Title,
			&i.Video.Description,
			&i.Video.VideoType,
			&i.Video.PublishedAt,
			&i.Video.Tags,
			&i.Video.ThumbnailUrl,
			&i.Video.IsDeleted,
			&i.StreamStatus.ID,
			&i.StreamStatus.VideoID,
			&i.StreamStatus.CreatorID,
			&i.StreamStatus.Status,
			&i.StreamStatus.StartedAt,
			&i.StreamStatus.EndedAt,
			&i.StreamStatus.ViewCount,
			&i.StreamStatus.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
