// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
)

type APICronChannelsGetBadRequest CronResponse

func (*APICronChannelsGetBadRequest) aPICronChannelsGetRes() {}

type APICronChannelsGetForbidden CronResponse

func (*APICronChannelsGetForbidden) aPICronChannelsGetRes() {}

type APICronChannelsGetInternalServerError CronResponse

func (*APICronChannelsGetInternalServerError) aPICronChannelsGetRes() {}

type APICronChannelsGetNotFound CronResponse

func (*APICronChannelsGetNotFound) aPICronChannelsGetRes() {}

type APICronChannelsGetOK CronResponse

func (*APICronChannelsGetOK) aPICronChannelsGetRes() {}

type APICronChannelsGetPlatformType string

const (
	APICronChannelsGetPlatformTypeYoutube     APICronChannelsGetPlatformType = "youtube"
	APICronChannelsGetPlatformTypeTwitch      APICronChannelsGetPlatformType = "twitch"
	APICronChannelsGetPlatformTypeTwitcasting APICronChannelsGetPlatformType = "twitcasting"
	APICronChannelsGetPlatformTypeNiconico    APICronChannelsGetPlatformType = "niconico"
)

// AllValues returns all APICronChannelsGetPlatformType values.
func (APICronChannelsGetPlatformType) AllValues() []APICronChannelsGetPlatformType {
	return []APICronChannelsGetPlatformType{
		APICronChannelsGetPlatformTypeYoutube,
		APICronChannelsGetPlatformTypeTwitch,
		APICronChannelsGetPlatformTypeTwitcasting,
		APICronChannelsGetPlatformTypeNiconico,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronChannelsGetPlatformType) MarshalText() ([]byte, error) {
	switch s {
	case APICronChannelsGetPlatformTypeYoutube:
		return []byte(s), nil
	case APICronChannelsGetPlatformTypeTwitch:
		return []byte(s), nil
	case APICronChannelsGetPlatformTypeTwitcasting:
		return []byte(s), nil
	case APICronChannelsGetPlatformTypeNiconico:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronChannelsGetPlatformType) UnmarshalText(data []byte) error {
	switch APICronChannelsGetPlatformType(data) {
	case APICronChannelsGetPlatformTypeYoutube:
		*s = APICronChannelsGetPlatformTypeYoutube
		return nil
	case APICronChannelsGetPlatformTypeTwitch:
		*s = APICronChannelsGetPlatformTypeTwitch
		return nil
	case APICronChannelsGetPlatformTypeTwitcasting:
		*s = APICronChannelsGetPlatformTypeTwitcasting
		return nil
	case APICronChannelsGetPlatformTypeNiconico:
		*s = APICronChannelsGetPlatformTypeNiconico
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronChannelsGetUnauthorized CronResponse

func (*APICronChannelsGetUnauthorized) aPICronChannelsGetRes() {}

type APICronCreatorsGetBadRequest CronResponse

func (*APICronCreatorsGetBadRequest) aPICronCreatorsGetRes() {}

type APICronCreatorsGetCreatorTypeItem string

const (
	APICronCreatorsGetCreatorTypeItemVspo    APICronCreatorsGetCreatorTypeItem = "vspo"
	APICronCreatorsGetCreatorTypeItemGeneral APICronCreatorsGetCreatorTypeItem = "general"
)

// AllValues returns all APICronCreatorsGetCreatorTypeItem values.
func (APICronCreatorsGetCreatorTypeItem) AllValues() []APICronCreatorsGetCreatorTypeItem {
	return []APICronCreatorsGetCreatorTypeItem{
		APICronCreatorsGetCreatorTypeItemVspo,
		APICronCreatorsGetCreatorTypeItemGeneral,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronCreatorsGetCreatorTypeItem) MarshalText() ([]byte, error) {
	switch s {
	case APICronCreatorsGetCreatorTypeItemVspo:
		return []byte(s), nil
	case APICronCreatorsGetCreatorTypeItemGeneral:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronCreatorsGetCreatorTypeItem) UnmarshalText(data []byte) error {
	switch APICronCreatorsGetCreatorTypeItem(data) {
	case APICronCreatorsGetCreatorTypeItemVspo:
		*s = APICronCreatorsGetCreatorTypeItemVspo
		return nil
	case APICronCreatorsGetCreatorTypeItemGeneral:
		*s = APICronCreatorsGetCreatorTypeItemGeneral
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronCreatorsGetForbidden CronResponse

func (*APICronCreatorsGetForbidden) aPICronCreatorsGetRes() {}

type APICronCreatorsGetInternalServerError CronResponse

func (*APICronCreatorsGetInternalServerError) aPICronCreatorsGetRes() {}

type APICronCreatorsGetNotFound CronResponse

func (*APICronCreatorsGetNotFound) aPICronCreatorsGetRes() {}

type APICronCreatorsGetOK CronResponse

func (*APICronCreatorsGetOK) aPICronCreatorsGetRes() {}

type APICronCreatorsGetPeriod string

const (
	APICronCreatorsGetPeriodDay   APICronCreatorsGetPeriod = "day"
	APICronCreatorsGetPeriodWeek  APICronCreatorsGetPeriod = "week"
	APICronCreatorsGetPeriodMonth APICronCreatorsGetPeriod = "month"
	APICronCreatorsGetPeriodYear  APICronCreatorsGetPeriod = "year"
)

// AllValues returns all APICronCreatorsGetPeriod values.
func (APICronCreatorsGetPeriod) AllValues() []APICronCreatorsGetPeriod {
	return []APICronCreatorsGetPeriod{
		APICronCreatorsGetPeriodDay,
		APICronCreatorsGetPeriodWeek,
		APICronCreatorsGetPeriodMonth,
		APICronCreatorsGetPeriodYear,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronCreatorsGetPeriod) MarshalText() ([]byte, error) {
	switch s {
	case APICronCreatorsGetPeriodDay:
		return []byte(s), nil
	case APICronCreatorsGetPeriodWeek:
		return []byte(s), nil
	case APICronCreatorsGetPeriodMonth:
		return []byte(s), nil
	case APICronCreatorsGetPeriodYear:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronCreatorsGetPeriod) UnmarshalText(data []byte) error {
	switch APICronCreatorsGetPeriod(data) {
	case APICronCreatorsGetPeriodDay:
		*s = APICronCreatorsGetPeriodDay
		return nil
	case APICronCreatorsGetPeriodWeek:
		*s = APICronCreatorsGetPeriodWeek
		return nil
	case APICronCreatorsGetPeriodMonth:
		*s = APICronCreatorsGetPeriodMonth
		return nil
	case APICronCreatorsGetPeriodYear:
		*s = APICronCreatorsGetPeriodYear
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronCreatorsGetPlatformTypeItem string

const (
	APICronCreatorsGetPlatformTypeItemYoutube     APICronCreatorsGetPlatformTypeItem = "youtube"
	APICronCreatorsGetPlatformTypeItemTwitch      APICronCreatorsGetPlatformTypeItem = "twitch"
	APICronCreatorsGetPlatformTypeItemTwitcasting APICronCreatorsGetPlatformTypeItem = "twitcasting"
	APICronCreatorsGetPlatformTypeItemNiconico    APICronCreatorsGetPlatformTypeItem = "niconico"
)

// AllValues returns all APICronCreatorsGetPlatformTypeItem values.
func (APICronCreatorsGetPlatformTypeItem) AllValues() []APICronCreatorsGetPlatformTypeItem {
	return []APICronCreatorsGetPlatformTypeItem{
		APICronCreatorsGetPlatformTypeItemYoutube,
		APICronCreatorsGetPlatformTypeItemTwitch,
		APICronCreatorsGetPlatformTypeItemTwitcasting,
		APICronCreatorsGetPlatformTypeItemNiconico,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronCreatorsGetPlatformTypeItem) MarshalText() ([]byte, error) {
	switch s {
	case APICronCreatorsGetPlatformTypeItemYoutube:
		return []byte(s), nil
	case APICronCreatorsGetPlatformTypeItemTwitch:
		return []byte(s), nil
	case APICronCreatorsGetPlatformTypeItemTwitcasting:
		return []byte(s), nil
	case APICronCreatorsGetPlatformTypeItemNiconico:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronCreatorsGetPlatformTypeItem) UnmarshalText(data []byte) error {
	switch APICronCreatorsGetPlatformTypeItem(data) {
	case APICronCreatorsGetPlatformTypeItemYoutube:
		*s = APICronCreatorsGetPlatformTypeItemYoutube
		return nil
	case APICronCreatorsGetPlatformTypeItemTwitch:
		*s = APICronCreatorsGetPlatformTypeItemTwitch
		return nil
	case APICronCreatorsGetPlatformTypeItemTwitcasting:
		*s = APICronCreatorsGetPlatformTypeItemTwitcasting
		return nil
	case APICronCreatorsGetPlatformTypeItemNiconico:
		*s = APICronCreatorsGetPlatformTypeItemNiconico
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronCreatorsGetUnauthorized CronResponse

func (*APICronCreatorsGetUnauthorized) aPICronCreatorsGetRes() {}

type APICronExistVideosGetBadRequest CronResponse

func (*APICronExistVideosGetBadRequest) aPICronExistVideosGetRes() {}

type APICronExistVideosGetForbidden CronResponse

func (*APICronExistVideosGetForbidden) aPICronExistVideosGetRes() {}

type APICronExistVideosGetInternalServerError CronResponse

func (*APICronExistVideosGetInternalServerError) aPICronExistVideosGetRes() {}

type APICronExistVideosGetNotFound CronResponse

func (*APICronExistVideosGetNotFound) aPICronExistVideosGetRes() {}

type APICronExistVideosGetOK CronResponse

func (*APICronExistVideosGetOK) aPICronExistVideosGetRes() {}

type APICronExistVideosGetPeriod string

const (
	APICronExistVideosGetPeriodDay   APICronExistVideosGetPeriod = "day"
	APICronExistVideosGetPeriodMonth APICronExistVideosGetPeriod = "month"
	APICronExistVideosGetPeriodWeek  APICronExistVideosGetPeriod = "week"
)

// AllValues returns all APICronExistVideosGetPeriod values.
func (APICronExistVideosGetPeriod) AllValues() []APICronExistVideosGetPeriod {
	return []APICronExistVideosGetPeriod{
		APICronExistVideosGetPeriodDay,
		APICronExistVideosGetPeriodMonth,
		APICronExistVideosGetPeriodWeek,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronExistVideosGetPeriod) MarshalText() ([]byte, error) {
	switch s {
	case APICronExistVideosGetPeriodDay:
		return []byte(s), nil
	case APICronExistVideosGetPeriodMonth:
		return []byte(s), nil
	case APICronExistVideosGetPeriodWeek:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronExistVideosGetPeriod) UnmarshalText(data []byte) error {
	switch APICronExistVideosGetPeriod(data) {
	case APICronExistVideosGetPeriodDay:
		*s = APICronExistVideosGetPeriodDay
		return nil
	case APICronExistVideosGetPeriodMonth:
		*s = APICronExistVideosGetPeriodMonth
		return nil
	case APICronExistVideosGetPeriodWeek:
		*s = APICronExistVideosGetPeriodWeek
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronExistVideosGetUnauthorized CronResponse

func (*APICronExistVideosGetUnauthorized) aPICronExistVideosGetRes() {}

type APICronSearchVideosGetBadRequest CronResponse

func (*APICronSearchVideosGetBadRequest) aPICronSearchVideosGetRes() {}

type APICronSearchVideosGetForbidden CronResponse

func (*APICronSearchVideosGetForbidden) aPICronSearchVideosGetRes() {}

type APICronSearchVideosGetInternalServerError CronResponse

func (*APICronSearchVideosGetInternalServerError) aPICronSearchVideosGetRes() {}

type APICronSearchVideosGetNotFound CronResponse

func (*APICronSearchVideosGetNotFound) aPICronSearchVideosGetRes() {}

type APICronSearchVideosGetOK CronResponse

func (*APICronSearchVideosGetOK) aPICronSearchVideosGetRes() {}

type APICronSearchVideosGetPlatformTypeItem string

const (
	APICronSearchVideosGetPlatformTypeItemYoutube     APICronSearchVideosGetPlatformTypeItem = "youtube"
	APICronSearchVideosGetPlatformTypeItemTwitch      APICronSearchVideosGetPlatformTypeItem = "twitch"
	APICronSearchVideosGetPlatformTypeItemTwitcasting APICronSearchVideosGetPlatformTypeItem = "twitcasting"
	APICronSearchVideosGetPlatformTypeItemNiconico    APICronSearchVideosGetPlatformTypeItem = "niconico"
)

// AllValues returns all APICronSearchVideosGetPlatformTypeItem values.
func (APICronSearchVideosGetPlatformTypeItem) AllValues() []APICronSearchVideosGetPlatformTypeItem {
	return []APICronSearchVideosGetPlatformTypeItem{
		APICronSearchVideosGetPlatformTypeItemYoutube,
		APICronSearchVideosGetPlatformTypeItemTwitch,
		APICronSearchVideosGetPlatformTypeItemTwitcasting,
		APICronSearchVideosGetPlatformTypeItemNiconico,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronSearchVideosGetPlatformTypeItem) MarshalText() ([]byte, error) {
	switch s {
	case APICronSearchVideosGetPlatformTypeItemYoutube:
		return []byte(s), nil
	case APICronSearchVideosGetPlatformTypeItemTwitch:
		return []byte(s), nil
	case APICronSearchVideosGetPlatformTypeItemTwitcasting:
		return []byte(s), nil
	case APICronSearchVideosGetPlatformTypeItemNiconico:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronSearchVideosGetPlatformTypeItem) UnmarshalText(data []byte) error {
	switch APICronSearchVideosGetPlatformTypeItem(data) {
	case APICronSearchVideosGetPlatformTypeItemYoutube:
		*s = APICronSearchVideosGetPlatformTypeItemYoutube
		return nil
	case APICronSearchVideosGetPlatformTypeItemTwitch:
		*s = APICronSearchVideosGetPlatformTypeItemTwitch
		return nil
	case APICronSearchVideosGetPlatformTypeItemTwitcasting:
		*s = APICronSearchVideosGetPlatformTypeItemTwitcasting
		return nil
	case APICronSearchVideosGetPlatformTypeItemNiconico:
		*s = APICronSearchVideosGetPlatformTypeItemNiconico
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronSearchVideosGetUnauthorized CronResponse

func (*APICronSearchVideosGetUnauthorized) aPICronSearchVideosGetRes() {}

type APICronSearchVideosGetVideoType string

const (
	APICronSearchVideosGetVideoTypeVspoStream APICronSearchVideosGetVideoType = "vspo_stream"
	APICronSearchVideosGetVideoTypeClip       APICronSearchVideosGetVideoType = "clip"
	APICronSearchVideosGetVideoTypeFreechat   APICronSearchVideosGetVideoType = "freechat"
)

// AllValues returns all APICronSearchVideosGetVideoType values.
func (APICronSearchVideosGetVideoType) AllValues() []APICronSearchVideosGetVideoType {
	return []APICronSearchVideosGetVideoType{
		APICronSearchVideosGetVideoTypeVspoStream,
		APICronSearchVideosGetVideoTypeClip,
		APICronSearchVideosGetVideoTypeFreechat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronSearchVideosGetVideoType) MarshalText() ([]byte, error) {
	switch s {
	case APICronSearchVideosGetVideoTypeVspoStream:
		return []byte(s), nil
	case APICronSearchVideosGetVideoTypeClip:
		return []byte(s), nil
	case APICronSearchVideosGetVideoTypeFreechat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronSearchVideosGetVideoType) UnmarshalText(data []byte) error {
	switch APICronSearchVideosGetVideoType(data) {
	case APICronSearchVideosGetVideoTypeVspoStream:
		*s = APICronSearchVideosGetVideoTypeVspoStream
		return nil
	case APICronSearchVideosGetVideoTypeClip:
		*s = APICronSearchVideosGetVideoTypeClip
		return nil
	case APICronSearchVideosGetVideoTypeFreechat:
		*s = APICronSearchVideosGetVideoTypeFreechat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APIPingGetOK struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *APIPingGetOK) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *APIPingGetOK) SetMessage(val OptString) {
	s.Message = val
}

// Ref: #/components/schemas/CronResponse
type CronResponse struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *CronResponse) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *CronResponse) SetMessage(val OptString) {
	s.Message = val
}

type ExistVideosBadRequest CronResponse

func (*ExistVideosBadRequest) existVideosRes() {}

type ExistVideosForbidden CronResponse

func (*ExistVideosForbidden) existVideosRes() {}

type ExistVideosInternalServerError CronResponse

func (*ExistVideosInternalServerError) existVideosRes() {}

type ExistVideosNotFound CronResponse

func (*ExistVideosNotFound) existVideosRes() {}

type ExistVideosOK CronResponse

func (*ExistVideosOK) existVideosRes() {}

type ExistVideosReq struct {
	// Period for performing updates.
	Period OptExistVideosReqPeriod `json:"period"`
}

// GetPeriod returns the value of Period.
func (s *ExistVideosReq) GetPeriod() OptExistVideosReqPeriod {
	return s.Period
}

// SetPeriod sets the value of Period.
func (s *ExistVideosReq) SetPeriod(val OptExistVideosReqPeriod) {
	s.Period = val
}

// Period for performing updates.
type ExistVideosReqPeriod string

const (
	ExistVideosReqPeriodDay   ExistVideosReqPeriod = "day"
	ExistVideosReqPeriodMonth ExistVideosReqPeriod = "month"
	ExistVideosReqPeriodWeek  ExistVideosReqPeriod = "week"
)

// AllValues returns all ExistVideosReqPeriod values.
func (ExistVideosReqPeriod) AllValues() []ExistVideosReqPeriod {
	return []ExistVideosReqPeriod{
		ExistVideosReqPeriodDay,
		ExistVideosReqPeriodMonth,
		ExistVideosReqPeriodWeek,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExistVideosReqPeriod) MarshalText() ([]byte, error) {
	switch s {
	case ExistVideosReqPeriodDay:
		return []byte(s), nil
	case ExistVideosReqPeriodMonth:
		return []byte(s), nil
	case ExistVideosReqPeriodWeek:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExistVideosReqPeriod) UnmarshalText(data []byte) error {
	switch ExistVideosReqPeriod(data) {
	case ExistVideosReqPeriodDay:
		*s = ExistVideosReqPeriodDay
		return nil
	case ExistVideosReqPeriodMonth:
		*s = ExistVideosReqPeriodMonth
		return nil
	case ExistVideosReqPeriodWeek:
		*s = ExistVideosReqPeriodWeek
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ExistVideosUnauthorized CronResponse

func (*ExistVideosUnauthorized) existVideosRes() {}

// NewOptExistVideosReqPeriod returns new OptExistVideosReqPeriod with value set to v.
func NewOptExistVideosReqPeriod(v ExistVideosReqPeriod) OptExistVideosReqPeriod {
	return OptExistVideosReqPeriod{
		Value: v,
		Set:   true,
	}
}

// OptExistVideosReqPeriod is optional ExistVideosReqPeriod.
type OptExistVideosReqPeriod struct {
	Value ExistVideosReqPeriod
	Set   bool
}

// IsSet returns true if OptExistVideosReqPeriod was set.
func (o OptExistVideosReqPeriod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExistVideosReqPeriod) Reset() {
	var v ExistVideosReqPeriod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExistVideosReqPeriod) SetTo(v ExistVideosReqPeriod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExistVideosReqPeriod) Get() (v ExistVideosReqPeriod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExistVideosReqPeriod) Or(d ExistVideosReqPeriod) ExistVideosReqPeriod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchVideosReqVideoType returns new OptSearchVideosReqVideoType with value set to v.
func NewOptSearchVideosReqVideoType(v SearchVideosReqVideoType) OptSearchVideosReqVideoType {
	return OptSearchVideosReqVideoType{
		Value: v,
		Set:   true,
	}
}

// OptSearchVideosReqVideoType is optional SearchVideosReqVideoType.
type OptSearchVideosReqVideoType struct {
	Value SearchVideosReqVideoType
	Set   bool
}

// IsSet returns true if OptSearchVideosReqVideoType was set.
func (o OptSearchVideosReqVideoType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchVideosReqVideoType) Reset() {
	var v SearchVideosReqVideoType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchVideosReqVideoType) SetTo(v SearchVideosReqVideoType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchVideosReqVideoType) Get() (v SearchVideosReqVideoType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchVideosReqVideoType) Or(d SearchVideosReqVideoType) SearchVideosReqVideoType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type PingOK struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *PingOK) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *PingOK) SetMessage(val OptString) {
	s.Message = val
}

type SearchVideosBadRequest CronResponse

func (*SearchVideosBadRequest) searchVideosRes() {}

type SearchVideosForbidden CronResponse

func (*SearchVideosForbidden) searchVideosRes() {}

type SearchVideosInternalServerError CronResponse

func (*SearchVideosInternalServerError) searchVideosRes() {}

type SearchVideosNotFound CronResponse

func (*SearchVideosNotFound) searchVideosRes() {}

type SearchVideosOK CronResponse

func (*SearchVideosOK) searchVideosRes() {}

type SearchVideosReq struct {
	// List of video platform types.
	PlatformType []SearchVideosReqPlatformTypeItem `json:"platform_type"`
	// Type of the cron.
	VideoType OptSearchVideosReqVideoType `json:"video_type"`
}

// GetPlatformType returns the value of PlatformType.
func (s *SearchVideosReq) GetPlatformType() []SearchVideosReqPlatformTypeItem {
	return s.PlatformType
}

// GetVideoType returns the value of VideoType.
func (s *SearchVideosReq) GetVideoType() OptSearchVideosReqVideoType {
	return s.VideoType
}

// SetPlatformType sets the value of PlatformType.
func (s *SearchVideosReq) SetPlatformType(val []SearchVideosReqPlatformTypeItem) {
	s.PlatformType = val
}

// SetVideoType sets the value of VideoType.
func (s *SearchVideosReq) SetVideoType(val OptSearchVideosReqVideoType) {
	s.VideoType = val
}

type SearchVideosReqPlatformTypeItem string

const (
	SearchVideosReqPlatformTypeItemYoutube     SearchVideosReqPlatformTypeItem = "youtube"
	SearchVideosReqPlatformTypeItemTwitch      SearchVideosReqPlatformTypeItem = "twitch"
	SearchVideosReqPlatformTypeItemTwitcasting SearchVideosReqPlatformTypeItem = "twitcasting"
	SearchVideosReqPlatformTypeItemNiconico    SearchVideosReqPlatformTypeItem = "niconico"
)

// AllValues returns all SearchVideosReqPlatformTypeItem values.
func (SearchVideosReqPlatformTypeItem) AllValues() []SearchVideosReqPlatformTypeItem {
	return []SearchVideosReqPlatformTypeItem{
		SearchVideosReqPlatformTypeItemYoutube,
		SearchVideosReqPlatformTypeItemTwitch,
		SearchVideosReqPlatformTypeItemTwitcasting,
		SearchVideosReqPlatformTypeItemNiconico,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SearchVideosReqPlatformTypeItem) MarshalText() ([]byte, error) {
	switch s {
	case SearchVideosReqPlatformTypeItemYoutube:
		return []byte(s), nil
	case SearchVideosReqPlatformTypeItemTwitch:
		return []byte(s), nil
	case SearchVideosReqPlatformTypeItemTwitcasting:
		return []byte(s), nil
	case SearchVideosReqPlatformTypeItemNiconico:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchVideosReqPlatformTypeItem) UnmarshalText(data []byte) error {
	switch SearchVideosReqPlatformTypeItem(data) {
	case SearchVideosReqPlatformTypeItemYoutube:
		*s = SearchVideosReqPlatformTypeItemYoutube
		return nil
	case SearchVideosReqPlatformTypeItemTwitch:
		*s = SearchVideosReqPlatformTypeItemTwitch
		return nil
	case SearchVideosReqPlatformTypeItemTwitcasting:
		*s = SearchVideosReqPlatformTypeItemTwitcasting
		return nil
	case SearchVideosReqPlatformTypeItemNiconico:
		*s = SearchVideosReqPlatformTypeItemNiconico
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Type of the cron.
type SearchVideosReqVideoType string

const (
	SearchVideosReqVideoTypeVspoStream SearchVideosReqVideoType = "vspo_stream"
	SearchVideosReqVideoTypeClip       SearchVideosReqVideoType = "clip"
	SearchVideosReqVideoTypeFreechat   SearchVideosReqVideoType = "freechat"
)

// AllValues returns all SearchVideosReqVideoType values.
func (SearchVideosReqVideoType) AllValues() []SearchVideosReqVideoType {
	return []SearchVideosReqVideoType{
		SearchVideosReqVideoTypeVspoStream,
		SearchVideosReqVideoTypeClip,
		SearchVideosReqVideoTypeFreechat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SearchVideosReqVideoType) MarshalText() ([]byte, error) {
	switch s {
	case SearchVideosReqVideoTypeVspoStream:
		return []byte(s), nil
	case SearchVideosReqVideoTypeClip:
		return []byte(s), nil
	case SearchVideosReqVideoTypeFreechat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchVideosReqVideoType) UnmarshalText(data []byte) error {
	switch SearchVideosReqVideoType(data) {
	case SearchVideosReqVideoTypeVspoStream:
		*s = SearchVideosReqVideoTypeVspoStream
		return nil
	case SearchVideosReqVideoTypeClip:
		*s = SearchVideosReqVideoTypeClip
		return nil
	case SearchVideosReqVideoTypeFreechat:
		*s = SearchVideosReqVideoTypeFreechat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SearchVideosUnauthorized CronResponse

func (*SearchVideosUnauthorized) searchVideosRes() {}
