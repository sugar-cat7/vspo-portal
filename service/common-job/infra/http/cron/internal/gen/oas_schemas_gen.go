// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
)

type APICronChannelsGetBadRequest CronResponse

func (*APICronChannelsGetBadRequest) aPICronChannelsGetRes() {}

type APICronChannelsGetForbidden CronResponse

func (*APICronChannelsGetForbidden) aPICronChannelsGetRes() {}

type APICronChannelsGetInternalServerError CronResponse

func (*APICronChannelsGetInternalServerError) aPICronChannelsGetRes() {}

type APICronChannelsGetNotFound CronResponse

func (*APICronChannelsGetNotFound) aPICronChannelsGetRes() {}

type APICronChannelsGetOK CronResponse

func (*APICronChannelsGetOK) aPICronChannelsGetRes() {}

type APICronChannelsGetPlatformType string

const (
	APICronChannelsGetPlatformTypeYoutube     APICronChannelsGetPlatformType = "youtube"
	APICronChannelsGetPlatformTypeTwitch      APICronChannelsGetPlatformType = "twitch"
	APICronChannelsGetPlatformTypeTwitcasting APICronChannelsGetPlatformType = "twitcasting"
	APICronChannelsGetPlatformTypeNiconico    APICronChannelsGetPlatformType = "niconico"
)

// AllValues returns all APICronChannelsGetPlatformType values.
func (APICronChannelsGetPlatformType) AllValues() []APICronChannelsGetPlatformType {
	return []APICronChannelsGetPlatformType{
		APICronChannelsGetPlatformTypeYoutube,
		APICronChannelsGetPlatformTypeTwitch,
		APICronChannelsGetPlatformTypeTwitcasting,
		APICronChannelsGetPlatformTypeNiconico,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronChannelsGetPlatformType) MarshalText() ([]byte, error) {
	switch s {
	case APICronChannelsGetPlatformTypeYoutube:
		return []byte(s), nil
	case APICronChannelsGetPlatformTypeTwitch:
		return []byte(s), nil
	case APICronChannelsGetPlatformTypeTwitcasting:
		return []byte(s), nil
	case APICronChannelsGetPlatformTypeNiconico:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronChannelsGetPlatformType) UnmarshalText(data []byte) error {
	switch APICronChannelsGetPlatformType(data) {
	case APICronChannelsGetPlatformTypeYoutube:
		*s = APICronChannelsGetPlatformTypeYoutube
		return nil
	case APICronChannelsGetPlatformTypeTwitch:
		*s = APICronChannelsGetPlatformTypeTwitch
		return nil
	case APICronChannelsGetPlatformTypeTwitcasting:
		*s = APICronChannelsGetPlatformTypeTwitcasting
		return nil
	case APICronChannelsGetPlatformTypeNiconico:
		*s = APICronChannelsGetPlatformTypeNiconico
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronChannelsGetUnauthorized CronResponse

func (*APICronChannelsGetUnauthorized) aPICronChannelsGetRes() {}

type APICronCreatorsGetBadRequest CronResponse

func (*APICronCreatorsGetBadRequest) aPICronCreatorsGetRes() {}

type APICronCreatorsGetCreatorTypeItem string

const (
	APICronCreatorsGetCreatorTypeItemVspo    APICronCreatorsGetCreatorTypeItem = "vspo"
	APICronCreatorsGetCreatorTypeItemGeneral APICronCreatorsGetCreatorTypeItem = "general"
)

// AllValues returns all APICronCreatorsGetCreatorTypeItem values.
func (APICronCreatorsGetCreatorTypeItem) AllValues() []APICronCreatorsGetCreatorTypeItem {
	return []APICronCreatorsGetCreatorTypeItem{
		APICronCreatorsGetCreatorTypeItemVspo,
		APICronCreatorsGetCreatorTypeItemGeneral,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronCreatorsGetCreatorTypeItem) MarshalText() ([]byte, error) {
	switch s {
	case APICronCreatorsGetCreatorTypeItemVspo:
		return []byte(s), nil
	case APICronCreatorsGetCreatorTypeItemGeneral:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronCreatorsGetCreatorTypeItem) UnmarshalText(data []byte) error {
	switch APICronCreatorsGetCreatorTypeItem(data) {
	case APICronCreatorsGetCreatorTypeItemVspo:
		*s = APICronCreatorsGetCreatorTypeItemVspo
		return nil
	case APICronCreatorsGetCreatorTypeItemGeneral:
		*s = APICronCreatorsGetCreatorTypeItemGeneral
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronCreatorsGetForbidden CronResponse

func (*APICronCreatorsGetForbidden) aPICronCreatorsGetRes() {}

type APICronCreatorsGetInternalServerError CronResponse

func (*APICronCreatorsGetInternalServerError) aPICronCreatorsGetRes() {}

type APICronCreatorsGetNotFound CronResponse

func (*APICronCreatorsGetNotFound) aPICronCreatorsGetRes() {}

type APICronCreatorsGetOK CronResponse

func (*APICronCreatorsGetOK) aPICronCreatorsGetRes() {}

type APICronCreatorsGetPeriod string

const (
	APICronCreatorsGetPeriodDay   APICronCreatorsGetPeriod = "day"
	APICronCreatorsGetPeriodWeek  APICronCreatorsGetPeriod = "week"
	APICronCreatorsGetPeriodMonth APICronCreatorsGetPeriod = "month"
	APICronCreatorsGetPeriodYear  APICronCreatorsGetPeriod = "year"
)

// AllValues returns all APICronCreatorsGetPeriod values.
func (APICronCreatorsGetPeriod) AllValues() []APICronCreatorsGetPeriod {
	return []APICronCreatorsGetPeriod{
		APICronCreatorsGetPeriodDay,
		APICronCreatorsGetPeriodWeek,
		APICronCreatorsGetPeriodMonth,
		APICronCreatorsGetPeriodYear,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronCreatorsGetPeriod) MarshalText() ([]byte, error) {
	switch s {
	case APICronCreatorsGetPeriodDay:
		return []byte(s), nil
	case APICronCreatorsGetPeriodWeek:
		return []byte(s), nil
	case APICronCreatorsGetPeriodMonth:
		return []byte(s), nil
	case APICronCreatorsGetPeriodYear:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronCreatorsGetPeriod) UnmarshalText(data []byte) error {
	switch APICronCreatorsGetPeriod(data) {
	case APICronCreatorsGetPeriodDay:
		*s = APICronCreatorsGetPeriodDay
		return nil
	case APICronCreatorsGetPeriodWeek:
		*s = APICronCreatorsGetPeriodWeek
		return nil
	case APICronCreatorsGetPeriodMonth:
		*s = APICronCreatorsGetPeriodMonth
		return nil
	case APICronCreatorsGetPeriodYear:
		*s = APICronCreatorsGetPeriodYear
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronCreatorsGetPlatformTypeItem string

const (
	APICronCreatorsGetPlatformTypeItemYoutube     APICronCreatorsGetPlatformTypeItem = "youtube"
	APICronCreatorsGetPlatformTypeItemTwitch      APICronCreatorsGetPlatformTypeItem = "twitch"
	APICronCreatorsGetPlatformTypeItemTwitcasting APICronCreatorsGetPlatformTypeItem = "twitcasting"
	APICronCreatorsGetPlatformTypeItemNiconico    APICronCreatorsGetPlatformTypeItem = "niconico"
)

// AllValues returns all APICronCreatorsGetPlatformTypeItem values.
func (APICronCreatorsGetPlatformTypeItem) AllValues() []APICronCreatorsGetPlatformTypeItem {
	return []APICronCreatorsGetPlatformTypeItem{
		APICronCreatorsGetPlatformTypeItemYoutube,
		APICronCreatorsGetPlatformTypeItemTwitch,
		APICronCreatorsGetPlatformTypeItemTwitcasting,
		APICronCreatorsGetPlatformTypeItemNiconico,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronCreatorsGetPlatformTypeItem) MarshalText() ([]byte, error) {
	switch s {
	case APICronCreatorsGetPlatformTypeItemYoutube:
		return []byte(s), nil
	case APICronCreatorsGetPlatformTypeItemTwitch:
		return []byte(s), nil
	case APICronCreatorsGetPlatformTypeItemTwitcasting:
		return []byte(s), nil
	case APICronCreatorsGetPlatformTypeItemNiconico:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronCreatorsGetPlatformTypeItem) UnmarshalText(data []byte) error {
	switch APICronCreatorsGetPlatformTypeItem(data) {
	case APICronCreatorsGetPlatformTypeItemYoutube:
		*s = APICronCreatorsGetPlatformTypeItemYoutube
		return nil
	case APICronCreatorsGetPlatformTypeItemTwitch:
		*s = APICronCreatorsGetPlatformTypeItemTwitch
		return nil
	case APICronCreatorsGetPlatformTypeItemTwitcasting:
		*s = APICronCreatorsGetPlatformTypeItemTwitcasting
		return nil
	case APICronCreatorsGetPlatformTypeItemNiconico:
		*s = APICronCreatorsGetPlatformTypeItemNiconico
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronCreatorsGetUnauthorized CronResponse

func (*APICronCreatorsGetUnauthorized) aPICronCreatorsGetRes() {}

type APICronVideosGetBadRequest CronResponse

func (*APICronVideosGetBadRequest) aPICronVideosGetRes() {}

type APICronVideosGetForbidden CronResponse

func (*APICronVideosGetForbidden) aPICronVideosGetRes() {}

type APICronVideosGetInternalServerError CronResponse

func (*APICronVideosGetInternalServerError) aPICronVideosGetRes() {}

type APICronVideosGetNotFound CronResponse

func (*APICronVideosGetNotFound) aPICronVideosGetRes() {}

type APICronVideosGetOK CronResponse

func (*APICronVideosGetOK) aPICronVideosGetRes() {}

type APICronVideosGetPeriod string

const (
	APICronVideosGetPeriodDay   APICronVideosGetPeriod = "day"
	APICronVideosGetPeriodMonth APICronVideosGetPeriod = "month"
	APICronVideosGetPeriodWeek  APICronVideosGetPeriod = "week"
)

// AllValues returns all APICronVideosGetPeriod values.
func (APICronVideosGetPeriod) AllValues() []APICronVideosGetPeriod {
	return []APICronVideosGetPeriod{
		APICronVideosGetPeriodDay,
		APICronVideosGetPeriodMonth,
		APICronVideosGetPeriodWeek,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronVideosGetPeriod) MarshalText() ([]byte, error) {
	switch s {
	case APICronVideosGetPeriodDay:
		return []byte(s), nil
	case APICronVideosGetPeriodMonth:
		return []byte(s), nil
	case APICronVideosGetPeriodWeek:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronVideosGetPeriod) UnmarshalText(data []byte) error {
	switch APICronVideosGetPeriod(data) {
	case APICronVideosGetPeriodDay:
		*s = APICronVideosGetPeriodDay
		return nil
	case APICronVideosGetPeriodMonth:
		*s = APICronVideosGetPeriodMonth
		return nil
	case APICronVideosGetPeriodWeek:
		*s = APICronVideosGetPeriodWeek
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronVideosGetPlatformTypeItem string

const (
	APICronVideosGetPlatformTypeItemYoutube     APICronVideosGetPlatformTypeItem = "youtube"
	APICronVideosGetPlatformTypeItemTwitch      APICronVideosGetPlatformTypeItem = "twitch"
	APICronVideosGetPlatformTypeItemTwitcasting APICronVideosGetPlatformTypeItem = "twitcasting"
	APICronVideosGetPlatformTypeItemNiconico    APICronVideosGetPlatformTypeItem = "niconico"
)

// AllValues returns all APICronVideosGetPlatformTypeItem values.
func (APICronVideosGetPlatformTypeItem) AllValues() []APICronVideosGetPlatformTypeItem {
	return []APICronVideosGetPlatformTypeItem{
		APICronVideosGetPlatformTypeItemYoutube,
		APICronVideosGetPlatformTypeItemTwitch,
		APICronVideosGetPlatformTypeItemTwitcasting,
		APICronVideosGetPlatformTypeItemNiconico,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronVideosGetPlatformTypeItem) MarshalText() ([]byte, error) {
	switch s {
	case APICronVideosGetPlatformTypeItemYoutube:
		return []byte(s), nil
	case APICronVideosGetPlatformTypeItemTwitch:
		return []byte(s), nil
	case APICronVideosGetPlatformTypeItemTwitcasting:
		return []byte(s), nil
	case APICronVideosGetPlatformTypeItemNiconico:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronVideosGetPlatformTypeItem) UnmarshalText(data []byte) error {
	switch APICronVideosGetPlatformTypeItem(data) {
	case APICronVideosGetPlatformTypeItemYoutube:
		*s = APICronVideosGetPlatformTypeItemYoutube
		return nil
	case APICronVideosGetPlatformTypeItemTwitch:
		*s = APICronVideosGetPlatformTypeItemTwitch
		return nil
	case APICronVideosGetPlatformTypeItemTwitcasting:
		*s = APICronVideosGetPlatformTypeItemTwitcasting
		return nil
	case APICronVideosGetPlatformTypeItemNiconico:
		*s = APICronVideosGetPlatformTypeItemNiconico
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronVideosGetUnauthorized CronResponse

func (*APICronVideosGetUnauthorized) aPICronVideosGetRes() {}

type APICronVideosGetVideoType string

const (
	APICronVideosGetVideoTypeVspoBroadcast APICronVideosGetVideoType = "vspo_broadcast"
	APICronVideosGetVideoTypeClip          APICronVideosGetVideoType = "clip"
	APICronVideosGetVideoTypeFreechat      APICronVideosGetVideoType = "freechat"
)

// AllValues returns all APICronVideosGetVideoType values.
func (APICronVideosGetVideoType) AllValues() []APICronVideosGetVideoType {
	return []APICronVideosGetVideoType{
		APICronVideosGetVideoTypeVspoBroadcast,
		APICronVideosGetVideoTypeClip,
		APICronVideosGetVideoTypeFreechat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronVideosGetVideoType) MarshalText() ([]byte, error) {
	switch s {
	case APICronVideosGetVideoTypeVspoBroadcast:
		return []byte(s), nil
	case APICronVideosGetVideoTypeClip:
		return []byte(s), nil
	case APICronVideosGetVideoTypeFreechat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronVideosGetVideoType) UnmarshalText(data []byte) error {
	switch APICronVideosGetVideoType(data) {
	case APICronVideosGetVideoTypeVspoBroadcast:
		*s = APICronVideosGetVideoTypeVspoBroadcast
		return nil
	case APICronVideosGetVideoTypeClip:
		*s = APICronVideosGetVideoTypeClip
		return nil
	case APICronVideosGetVideoTypeFreechat:
		*s = APICronVideosGetVideoTypeFreechat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APIPingGetOK struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *APIPingGetOK) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *APIPingGetOK) SetMessage(val OptString) {
	s.Message = val
}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/CronResponse
type CronResponse struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *CronResponse) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *CronResponse) SetMessage(val OptString) {
	s.Message = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
