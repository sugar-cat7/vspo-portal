// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
)

type APICronChannelsGetBadRequest CronResponse

func (*APICronChannelsGetBadRequest) aPICronChannelsGetRes() {}

type APICronChannelsGetForbidden CronResponse

func (*APICronChannelsGetForbidden) aPICronChannelsGetRes() {}

type APICronChannelsGetInternalServerError CronResponse

func (*APICronChannelsGetInternalServerError) aPICronChannelsGetRes() {}

type APICronChannelsGetNotFound CronResponse

func (*APICronChannelsGetNotFound) aPICronChannelsGetRes() {}

type APICronChannelsGetOK CronResponse

func (*APICronChannelsGetOK) aPICronChannelsGetRes() {}

type APICronChannelsGetPlatformType string

const (
	APICronChannelsGetPlatformTypeYoutube     APICronChannelsGetPlatformType = "youtube"
	APICronChannelsGetPlatformTypeTwitch      APICronChannelsGetPlatformType = "twitch"
	APICronChannelsGetPlatformTypeTwitcasting APICronChannelsGetPlatformType = "twitcasting"
	APICronChannelsGetPlatformTypeNiconico    APICronChannelsGetPlatformType = "niconico"
)

// AllValues returns all APICronChannelsGetPlatformType values.
func (APICronChannelsGetPlatformType) AllValues() []APICronChannelsGetPlatformType {
	return []APICronChannelsGetPlatformType{
		APICronChannelsGetPlatformTypeYoutube,
		APICronChannelsGetPlatformTypeTwitch,
		APICronChannelsGetPlatformTypeTwitcasting,
		APICronChannelsGetPlatformTypeNiconico,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronChannelsGetPlatformType) MarshalText() ([]byte, error) {
	switch s {
	case APICronChannelsGetPlatformTypeYoutube:
		return []byte(s), nil
	case APICronChannelsGetPlatformTypeTwitch:
		return []byte(s), nil
	case APICronChannelsGetPlatformTypeTwitcasting:
		return []byte(s), nil
	case APICronChannelsGetPlatformTypeNiconico:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronChannelsGetPlatformType) UnmarshalText(data []byte) error {
	switch APICronChannelsGetPlatformType(data) {
	case APICronChannelsGetPlatformTypeYoutube:
		*s = APICronChannelsGetPlatformTypeYoutube
		return nil
	case APICronChannelsGetPlatformTypeTwitch:
		*s = APICronChannelsGetPlatformTypeTwitch
		return nil
	case APICronChannelsGetPlatformTypeTwitcasting:
		*s = APICronChannelsGetPlatformTypeTwitcasting
		return nil
	case APICronChannelsGetPlatformTypeNiconico:
		*s = APICronChannelsGetPlatformTypeNiconico
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronChannelsGetUnauthorized CronResponse

func (*APICronChannelsGetUnauthorized) aPICronChannelsGetRes() {}

type APICronCreatorsGetBadRequest CronResponse

func (*APICronCreatorsGetBadRequest) aPICronCreatorsGetRes() {}

type APICronCreatorsGetCreatorTypeItem string

const (
	APICronCreatorsGetCreatorTypeItemVspo    APICronCreatorsGetCreatorTypeItem = "vspo"
	APICronCreatorsGetCreatorTypeItemGeneral APICronCreatorsGetCreatorTypeItem = "general"
)

// AllValues returns all APICronCreatorsGetCreatorTypeItem values.
func (APICronCreatorsGetCreatorTypeItem) AllValues() []APICronCreatorsGetCreatorTypeItem {
	return []APICronCreatorsGetCreatorTypeItem{
		APICronCreatorsGetCreatorTypeItemVspo,
		APICronCreatorsGetCreatorTypeItemGeneral,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronCreatorsGetCreatorTypeItem) MarshalText() ([]byte, error) {
	switch s {
	case APICronCreatorsGetCreatorTypeItemVspo:
		return []byte(s), nil
	case APICronCreatorsGetCreatorTypeItemGeneral:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronCreatorsGetCreatorTypeItem) UnmarshalText(data []byte) error {
	switch APICronCreatorsGetCreatorTypeItem(data) {
	case APICronCreatorsGetCreatorTypeItemVspo:
		*s = APICronCreatorsGetCreatorTypeItemVspo
		return nil
	case APICronCreatorsGetCreatorTypeItemGeneral:
		*s = APICronCreatorsGetCreatorTypeItemGeneral
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronCreatorsGetForbidden CronResponse

func (*APICronCreatorsGetForbidden) aPICronCreatorsGetRes() {}

type APICronCreatorsGetInternalServerError CronResponse

func (*APICronCreatorsGetInternalServerError) aPICronCreatorsGetRes() {}

type APICronCreatorsGetNotFound CronResponse

func (*APICronCreatorsGetNotFound) aPICronCreatorsGetRes() {}

type APICronCreatorsGetOK CronResponse

func (*APICronCreatorsGetOK) aPICronCreatorsGetRes() {}

type APICronCreatorsGetPeriod string

const (
	APICronCreatorsGetPeriodDay   APICronCreatorsGetPeriod = "day"
	APICronCreatorsGetPeriodWeek  APICronCreatorsGetPeriod = "week"
	APICronCreatorsGetPeriodMonth APICronCreatorsGetPeriod = "month"
	APICronCreatorsGetPeriodYear  APICronCreatorsGetPeriod = "year"
)

// AllValues returns all APICronCreatorsGetPeriod values.
func (APICronCreatorsGetPeriod) AllValues() []APICronCreatorsGetPeriod {
	return []APICronCreatorsGetPeriod{
		APICronCreatorsGetPeriodDay,
		APICronCreatorsGetPeriodWeek,
		APICronCreatorsGetPeriodMonth,
		APICronCreatorsGetPeriodYear,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronCreatorsGetPeriod) MarshalText() ([]byte, error) {
	switch s {
	case APICronCreatorsGetPeriodDay:
		return []byte(s), nil
	case APICronCreatorsGetPeriodWeek:
		return []byte(s), nil
	case APICronCreatorsGetPeriodMonth:
		return []byte(s), nil
	case APICronCreatorsGetPeriodYear:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronCreatorsGetPeriod) UnmarshalText(data []byte) error {
	switch APICronCreatorsGetPeriod(data) {
	case APICronCreatorsGetPeriodDay:
		*s = APICronCreatorsGetPeriodDay
		return nil
	case APICronCreatorsGetPeriodWeek:
		*s = APICronCreatorsGetPeriodWeek
		return nil
	case APICronCreatorsGetPeriodMonth:
		*s = APICronCreatorsGetPeriodMonth
		return nil
	case APICronCreatorsGetPeriodYear:
		*s = APICronCreatorsGetPeriodYear
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronCreatorsGetPlatformTypeItem string

const (
	APICronCreatorsGetPlatformTypeItemYoutube     APICronCreatorsGetPlatformTypeItem = "youtube"
	APICronCreatorsGetPlatformTypeItemTwitch      APICronCreatorsGetPlatformTypeItem = "twitch"
	APICronCreatorsGetPlatformTypeItemTwitcasting APICronCreatorsGetPlatformTypeItem = "twitcasting"
	APICronCreatorsGetPlatformTypeItemNiconico    APICronCreatorsGetPlatformTypeItem = "niconico"
)

// AllValues returns all APICronCreatorsGetPlatformTypeItem values.
func (APICronCreatorsGetPlatformTypeItem) AllValues() []APICronCreatorsGetPlatformTypeItem {
	return []APICronCreatorsGetPlatformTypeItem{
		APICronCreatorsGetPlatformTypeItemYoutube,
		APICronCreatorsGetPlatformTypeItemTwitch,
		APICronCreatorsGetPlatformTypeItemTwitcasting,
		APICronCreatorsGetPlatformTypeItemNiconico,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronCreatorsGetPlatformTypeItem) MarshalText() ([]byte, error) {
	switch s {
	case APICronCreatorsGetPlatformTypeItemYoutube:
		return []byte(s), nil
	case APICronCreatorsGetPlatformTypeItemTwitch:
		return []byte(s), nil
	case APICronCreatorsGetPlatformTypeItemTwitcasting:
		return []byte(s), nil
	case APICronCreatorsGetPlatformTypeItemNiconico:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronCreatorsGetPlatformTypeItem) UnmarshalText(data []byte) error {
	switch APICronCreatorsGetPlatformTypeItem(data) {
	case APICronCreatorsGetPlatformTypeItemYoutube:
		*s = APICronCreatorsGetPlatformTypeItemYoutube
		return nil
	case APICronCreatorsGetPlatformTypeItemTwitch:
		*s = APICronCreatorsGetPlatformTypeItemTwitch
		return nil
	case APICronCreatorsGetPlatformTypeItemTwitcasting:
		*s = APICronCreatorsGetPlatformTypeItemTwitcasting
		return nil
	case APICronCreatorsGetPlatformTypeItemNiconico:
		*s = APICronCreatorsGetPlatformTypeItemNiconico
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronCreatorsGetUnauthorized CronResponse

func (*APICronCreatorsGetUnauthorized) aPICronCreatorsGetRes() {}

type APICronExistVideosGetBadRequest CronResponse

func (*APICronExistVideosGetBadRequest) aPICronExistVideosGetRes() {}

type APICronExistVideosGetForbidden CronResponse

func (*APICronExistVideosGetForbidden) aPICronExistVideosGetRes() {}

type APICronExistVideosGetInternalServerError CronResponse

func (*APICronExistVideosGetInternalServerError) aPICronExistVideosGetRes() {}

type APICronExistVideosGetNotFound CronResponse

func (*APICronExistVideosGetNotFound) aPICronExistVideosGetRes() {}

type APICronExistVideosGetOK CronResponse

func (*APICronExistVideosGetOK) aPICronExistVideosGetRes() {}

type APICronExistVideosGetPeriod string

const (
	APICronExistVideosGetPeriodDay   APICronExistVideosGetPeriod = "day"
	APICronExistVideosGetPeriodMonth APICronExistVideosGetPeriod = "month"
	APICronExistVideosGetPeriodWeek  APICronExistVideosGetPeriod = "week"
)

// AllValues returns all APICronExistVideosGetPeriod values.
func (APICronExistVideosGetPeriod) AllValues() []APICronExistVideosGetPeriod {
	return []APICronExistVideosGetPeriod{
		APICronExistVideosGetPeriodDay,
		APICronExistVideosGetPeriodMonth,
		APICronExistVideosGetPeriodWeek,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronExistVideosGetPeriod) MarshalText() ([]byte, error) {
	switch s {
	case APICronExistVideosGetPeriodDay:
		return []byte(s), nil
	case APICronExistVideosGetPeriodMonth:
		return []byte(s), nil
	case APICronExistVideosGetPeriodWeek:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronExistVideosGetPeriod) UnmarshalText(data []byte) error {
	switch APICronExistVideosGetPeriod(data) {
	case APICronExistVideosGetPeriodDay:
		*s = APICronExistVideosGetPeriodDay
		return nil
	case APICronExistVideosGetPeriodMonth:
		*s = APICronExistVideosGetPeriodMonth
		return nil
	case APICronExistVideosGetPeriodWeek:
		*s = APICronExistVideosGetPeriodWeek
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronExistVideosGetUnauthorized CronResponse

func (*APICronExistVideosGetUnauthorized) aPICronExistVideosGetRes() {}

type APICronSearchVideosGetBadRequest CronResponse

func (*APICronSearchVideosGetBadRequest) aPICronSearchVideosGetRes() {}

type APICronSearchVideosGetForbidden CronResponse

func (*APICronSearchVideosGetForbidden) aPICronSearchVideosGetRes() {}

type APICronSearchVideosGetInternalServerError CronResponse

func (*APICronSearchVideosGetInternalServerError) aPICronSearchVideosGetRes() {}

type APICronSearchVideosGetNotFound CronResponse

func (*APICronSearchVideosGetNotFound) aPICronSearchVideosGetRes() {}

type APICronSearchVideosGetOK CronResponse

func (*APICronSearchVideosGetOK) aPICronSearchVideosGetRes() {}

type APICronSearchVideosGetPlatformTypeItem string

const (
	APICronSearchVideosGetPlatformTypeItemYoutube     APICronSearchVideosGetPlatformTypeItem = "youtube"
	APICronSearchVideosGetPlatformTypeItemTwitch      APICronSearchVideosGetPlatformTypeItem = "twitch"
	APICronSearchVideosGetPlatformTypeItemTwitcasting APICronSearchVideosGetPlatformTypeItem = "twitcasting"
	APICronSearchVideosGetPlatformTypeItemNiconico    APICronSearchVideosGetPlatformTypeItem = "niconico"
)

// AllValues returns all APICronSearchVideosGetPlatformTypeItem values.
func (APICronSearchVideosGetPlatformTypeItem) AllValues() []APICronSearchVideosGetPlatformTypeItem {
	return []APICronSearchVideosGetPlatformTypeItem{
		APICronSearchVideosGetPlatformTypeItemYoutube,
		APICronSearchVideosGetPlatformTypeItemTwitch,
		APICronSearchVideosGetPlatformTypeItemTwitcasting,
		APICronSearchVideosGetPlatformTypeItemNiconico,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronSearchVideosGetPlatformTypeItem) MarshalText() ([]byte, error) {
	switch s {
	case APICronSearchVideosGetPlatformTypeItemYoutube:
		return []byte(s), nil
	case APICronSearchVideosGetPlatformTypeItemTwitch:
		return []byte(s), nil
	case APICronSearchVideosGetPlatformTypeItemTwitcasting:
		return []byte(s), nil
	case APICronSearchVideosGetPlatformTypeItemNiconico:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronSearchVideosGetPlatformTypeItem) UnmarshalText(data []byte) error {
	switch APICronSearchVideosGetPlatformTypeItem(data) {
	case APICronSearchVideosGetPlatformTypeItemYoutube:
		*s = APICronSearchVideosGetPlatformTypeItemYoutube
		return nil
	case APICronSearchVideosGetPlatformTypeItemTwitch:
		*s = APICronSearchVideosGetPlatformTypeItemTwitch
		return nil
	case APICronSearchVideosGetPlatformTypeItemTwitcasting:
		*s = APICronSearchVideosGetPlatformTypeItemTwitcasting
		return nil
	case APICronSearchVideosGetPlatformTypeItemNiconico:
		*s = APICronSearchVideosGetPlatformTypeItemNiconico
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APICronSearchVideosGetUnauthorized CronResponse

func (*APICronSearchVideosGetUnauthorized) aPICronSearchVideosGetRes() {}

type APICronSearchVideosGetVideoType string

const (
	APICronSearchVideosGetVideoTypeVspoStream APICronSearchVideosGetVideoType = "vspo_stream"
	APICronSearchVideosGetVideoTypeClip       APICronSearchVideosGetVideoType = "clip"
	APICronSearchVideosGetVideoTypeFreechat   APICronSearchVideosGetVideoType = "freechat"
)

// AllValues returns all APICronSearchVideosGetVideoType values.
func (APICronSearchVideosGetVideoType) AllValues() []APICronSearchVideosGetVideoType {
	return []APICronSearchVideosGetVideoType{
		APICronSearchVideosGetVideoTypeVspoStream,
		APICronSearchVideosGetVideoTypeClip,
		APICronSearchVideosGetVideoTypeFreechat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APICronSearchVideosGetVideoType) MarshalText() ([]byte, error) {
	switch s {
	case APICronSearchVideosGetVideoTypeVspoStream:
		return []byte(s), nil
	case APICronSearchVideosGetVideoTypeClip:
		return []byte(s), nil
	case APICronSearchVideosGetVideoTypeFreechat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APICronSearchVideosGetVideoType) UnmarshalText(data []byte) error {
	switch APICronSearchVideosGetVideoType(data) {
	case APICronSearchVideosGetVideoTypeVspoStream:
		*s = APICronSearchVideosGetVideoTypeVspoStream
		return nil
	case APICronSearchVideosGetVideoTypeClip:
		*s = APICronSearchVideosGetVideoTypeClip
		return nil
	case APICronSearchVideosGetVideoTypeFreechat:
		*s = APICronSearchVideosGetVideoTypeFreechat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APIPingGetOK struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *APIPingGetOK) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *APIPingGetOK) SetMessage(val OptString) {
	s.Message = val
}

// Ref: #/components/schemas/CronResponse
type CronResponse struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *CronResponse) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *CronResponse) SetMessage(val OptString) {
	s.Message = val
}

type ExistVideosPostBadRequest CronResponse

func (*ExistVideosPostBadRequest) existVideosPostRes() {}

type ExistVideosPostForbidden CronResponse

func (*ExistVideosPostForbidden) existVideosPostRes() {}

type ExistVideosPostInternalServerError CronResponse

func (*ExistVideosPostInternalServerError) existVideosPostRes() {}

type ExistVideosPostNotFound CronResponse

func (*ExistVideosPostNotFound) existVideosPostRes() {}

type ExistVideosPostOK CronResponse

func (*ExistVideosPostOK) existVideosPostRes() {}

type ExistVideosPostReq struct {
	// Period for performing updates.
	Period OptExistVideosPostReqPeriod `json:"period"`
}

// GetPeriod returns the value of Period.
func (s *ExistVideosPostReq) GetPeriod() OptExistVideosPostReqPeriod {
	return s.Period
}

// SetPeriod sets the value of Period.
func (s *ExistVideosPostReq) SetPeriod(val OptExistVideosPostReqPeriod) {
	s.Period = val
}

// Period for performing updates.
type ExistVideosPostReqPeriod string

const (
	ExistVideosPostReqPeriodDay   ExistVideosPostReqPeriod = "day"
	ExistVideosPostReqPeriodMonth ExistVideosPostReqPeriod = "month"
	ExistVideosPostReqPeriodWeek  ExistVideosPostReqPeriod = "week"
)

// AllValues returns all ExistVideosPostReqPeriod values.
func (ExistVideosPostReqPeriod) AllValues() []ExistVideosPostReqPeriod {
	return []ExistVideosPostReqPeriod{
		ExistVideosPostReqPeriodDay,
		ExistVideosPostReqPeriodMonth,
		ExistVideosPostReqPeriodWeek,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExistVideosPostReqPeriod) MarshalText() ([]byte, error) {
	switch s {
	case ExistVideosPostReqPeriodDay:
		return []byte(s), nil
	case ExistVideosPostReqPeriodMonth:
		return []byte(s), nil
	case ExistVideosPostReqPeriodWeek:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExistVideosPostReqPeriod) UnmarshalText(data []byte) error {
	switch ExistVideosPostReqPeriod(data) {
	case ExistVideosPostReqPeriodDay:
		*s = ExistVideosPostReqPeriodDay
		return nil
	case ExistVideosPostReqPeriodMonth:
		*s = ExistVideosPostReqPeriodMonth
		return nil
	case ExistVideosPostReqPeriodWeek:
		*s = ExistVideosPostReqPeriodWeek
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ExistVideosPostUnauthorized CronResponse

func (*ExistVideosPostUnauthorized) existVideosPostRes() {}

// NewOptExistVideosPostReqPeriod returns new OptExistVideosPostReqPeriod with value set to v.
func NewOptExistVideosPostReqPeriod(v ExistVideosPostReqPeriod) OptExistVideosPostReqPeriod {
	return OptExistVideosPostReqPeriod{
		Value: v,
		Set:   true,
	}
}

// OptExistVideosPostReqPeriod is optional ExistVideosPostReqPeriod.
type OptExistVideosPostReqPeriod struct {
	Value ExistVideosPostReqPeriod
	Set   bool
}

// IsSet returns true if OptExistVideosPostReqPeriod was set.
func (o OptExistVideosPostReqPeriod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExistVideosPostReqPeriod) Reset() {
	var v ExistVideosPostReqPeriod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExistVideosPostReqPeriod) SetTo(v ExistVideosPostReqPeriod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExistVideosPostReqPeriod) Get() (v ExistVideosPostReqPeriod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExistVideosPostReqPeriod) Or(d ExistVideosPostReqPeriod) ExistVideosPostReqPeriod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSearchVideosPostReqVideoType returns new OptSearchVideosPostReqVideoType with value set to v.
func NewOptSearchVideosPostReqVideoType(v SearchVideosPostReqVideoType) OptSearchVideosPostReqVideoType {
	return OptSearchVideosPostReqVideoType{
		Value: v,
		Set:   true,
	}
}

// OptSearchVideosPostReqVideoType is optional SearchVideosPostReqVideoType.
type OptSearchVideosPostReqVideoType struct {
	Value SearchVideosPostReqVideoType
	Set   bool
}

// IsSet returns true if OptSearchVideosPostReqVideoType was set.
func (o OptSearchVideosPostReqVideoType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSearchVideosPostReqVideoType) Reset() {
	var v SearchVideosPostReqVideoType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSearchVideosPostReqVideoType) SetTo(v SearchVideosPostReqVideoType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSearchVideosPostReqVideoType) Get() (v SearchVideosPostReqVideoType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSearchVideosPostReqVideoType) Or(d SearchVideosPostReqVideoType) SearchVideosPostReqVideoType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type PingPostOK struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *PingPostOK) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *PingPostOK) SetMessage(val OptString) {
	s.Message = val
}

type SearchVideosPostBadRequest CronResponse

func (*SearchVideosPostBadRequest) searchVideosPostRes() {}

type SearchVideosPostForbidden CronResponse

func (*SearchVideosPostForbidden) searchVideosPostRes() {}

type SearchVideosPostInternalServerError CronResponse

func (*SearchVideosPostInternalServerError) searchVideosPostRes() {}

type SearchVideosPostNotFound CronResponse

func (*SearchVideosPostNotFound) searchVideosPostRes() {}

type SearchVideosPostOK CronResponse

func (*SearchVideosPostOK) searchVideosPostRes() {}

type SearchVideosPostReq struct {
	// List of video platform types.
	PlatformType []SearchVideosPostReqPlatformTypeItem `json:"platform_type"`
	// Type of the cron.
	VideoType OptSearchVideosPostReqVideoType `json:"video_type"`
}

// GetPlatformType returns the value of PlatformType.
func (s *SearchVideosPostReq) GetPlatformType() []SearchVideosPostReqPlatformTypeItem {
	return s.PlatformType
}

// GetVideoType returns the value of VideoType.
func (s *SearchVideosPostReq) GetVideoType() OptSearchVideosPostReqVideoType {
	return s.VideoType
}

// SetPlatformType sets the value of PlatformType.
func (s *SearchVideosPostReq) SetPlatformType(val []SearchVideosPostReqPlatformTypeItem) {
	s.PlatformType = val
}

// SetVideoType sets the value of VideoType.
func (s *SearchVideosPostReq) SetVideoType(val OptSearchVideosPostReqVideoType) {
	s.VideoType = val
}

type SearchVideosPostReqPlatformTypeItem string

const (
	SearchVideosPostReqPlatformTypeItemYoutube     SearchVideosPostReqPlatformTypeItem = "youtube"
	SearchVideosPostReqPlatformTypeItemTwitch      SearchVideosPostReqPlatformTypeItem = "twitch"
	SearchVideosPostReqPlatformTypeItemTwitcasting SearchVideosPostReqPlatformTypeItem = "twitcasting"
	SearchVideosPostReqPlatformTypeItemNiconico    SearchVideosPostReqPlatformTypeItem = "niconico"
)

// AllValues returns all SearchVideosPostReqPlatformTypeItem values.
func (SearchVideosPostReqPlatformTypeItem) AllValues() []SearchVideosPostReqPlatformTypeItem {
	return []SearchVideosPostReqPlatformTypeItem{
		SearchVideosPostReqPlatformTypeItemYoutube,
		SearchVideosPostReqPlatformTypeItemTwitch,
		SearchVideosPostReqPlatformTypeItemTwitcasting,
		SearchVideosPostReqPlatformTypeItemNiconico,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SearchVideosPostReqPlatformTypeItem) MarshalText() ([]byte, error) {
	switch s {
	case SearchVideosPostReqPlatformTypeItemYoutube:
		return []byte(s), nil
	case SearchVideosPostReqPlatformTypeItemTwitch:
		return []byte(s), nil
	case SearchVideosPostReqPlatformTypeItemTwitcasting:
		return []byte(s), nil
	case SearchVideosPostReqPlatformTypeItemNiconico:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchVideosPostReqPlatformTypeItem) UnmarshalText(data []byte) error {
	switch SearchVideosPostReqPlatformTypeItem(data) {
	case SearchVideosPostReqPlatformTypeItemYoutube:
		*s = SearchVideosPostReqPlatformTypeItemYoutube
		return nil
	case SearchVideosPostReqPlatformTypeItemTwitch:
		*s = SearchVideosPostReqPlatformTypeItemTwitch
		return nil
	case SearchVideosPostReqPlatformTypeItemTwitcasting:
		*s = SearchVideosPostReqPlatformTypeItemTwitcasting
		return nil
	case SearchVideosPostReqPlatformTypeItemNiconico:
		*s = SearchVideosPostReqPlatformTypeItemNiconico
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Type of the cron.
type SearchVideosPostReqVideoType string

const (
	SearchVideosPostReqVideoTypeVspoStream SearchVideosPostReqVideoType = "vspo_stream"
	SearchVideosPostReqVideoTypeClip       SearchVideosPostReqVideoType = "clip"
	SearchVideosPostReqVideoTypeFreechat   SearchVideosPostReqVideoType = "freechat"
)

// AllValues returns all SearchVideosPostReqVideoType values.
func (SearchVideosPostReqVideoType) AllValues() []SearchVideosPostReqVideoType {
	return []SearchVideosPostReqVideoType{
		SearchVideosPostReqVideoTypeVspoStream,
		SearchVideosPostReqVideoTypeClip,
		SearchVideosPostReqVideoTypeFreechat,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SearchVideosPostReqVideoType) MarshalText() ([]byte, error) {
	switch s {
	case SearchVideosPostReqVideoTypeVspoStream:
		return []byte(s), nil
	case SearchVideosPostReqVideoTypeClip:
		return []byte(s), nil
	case SearchVideosPostReqVideoTypeFreechat:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SearchVideosPostReqVideoType) UnmarshalText(data []byte) error {
	switch SearchVideosPostReqVideoType(data) {
	case SearchVideosPostReqVideoTypeVspoStream:
		*s = SearchVideosPostReqVideoTypeVspoStream
		return nil
	case SearchVideosPostReqVideoTypeClip:
		*s = SearchVideosPostReqVideoTypeClip
		return nil
	case SearchVideosPostReqVideoTypeFreechat:
		*s = SearchVideosPostReqVideoTypeFreechat
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SearchVideosPostUnauthorized CronResponse

func (*SearchVideosPostUnauthorized) searchVideosPostRes() {}
