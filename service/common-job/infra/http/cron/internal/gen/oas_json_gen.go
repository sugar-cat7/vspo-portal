// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// Encode encodes APICronChannelsGetBadRequest as json.
func (s *APICronChannelsGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronChannelsGetBadRequest from json.
func (s *APICronChannelsGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronChannelsGetBadRequest to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronChannelsGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronChannelsGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronChannelsGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronChannelsGetForbidden as json.
func (s *APICronChannelsGetForbidden) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronChannelsGetForbidden from json.
func (s *APICronChannelsGetForbidden) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronChannelsGetForbidden to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronChannelsGetForbidden(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronChannelsGetForbidden) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronChannelsGetForbidden) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronChannelsGetInternalServerError as json.
func (s *APICronChannelsGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronChannelsGetInternalServerError from json.
func (s *APICronChannelsGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronChannelsGetInternalServerError to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronChannelsGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronChannelsGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronChannelsGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronChannelsGetNotFound as json.
func (s *APICronChannelsGetNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronChannelsGetNotFound from json.
func (s *APICronChannelsGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronChannelsGetNotFound to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronChannelsGetNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronChannelsGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronChannelsGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronChannelsGetOK as json.
func (s *APICronChannelsGetOK) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronChannelsGetOK from json.
func (s *APICronChannelsGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronChannelsGetOK to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronChannelsGetOK(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronChannelsGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronChannelsGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronChannelsGetUnauthorized as json.
func (s *APICronChannelsGetUnauthorized) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronChannelsGetUnauthorized from json.
func (s *APICronChannelsGetUnauthorized) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronChannelsGetUnauthorized to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronChannelsGetUnauthorized(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronChannelsGetUnauthorized) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronChannelsGetUnauthorized) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronCreatorsGetBadRequest as json.
func (s *APICronCreatorsGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronCreatorsGetBadRequest from json.
func (s *APICronCreatorsGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronCreatorsGetBadRequest to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronCreatorsGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronCreatorsGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronCreatorsGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronCreatorsGetForbidden as json.
func (s *APICronCreatorsGetForbidden) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronCreatorsGetForbidden from json.
func (s *APICronCreatorsGetForbidden) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronCreatorsGetForbidden to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronCreatorsGetForbidden(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronCreatorsGetForbidden) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronCreatorsGetForbidden) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronCreatorsGetInternalServerError as json.
func (s *APICronCreatorsGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronCreatorsGetInternalServerError from json.
func (s *APICronCreatorsGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronCreatorsGetInternalServerError to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronCreatorsGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronCreatorsGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronCreatorsGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronCreatorsGetNotFound as json.
func (s *APICronCreatorsGetNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronCreatorsGetNotFound from json.
func (s *APICronCreatorsGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronCreatorsGetNotFound to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronCreatorsGetNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronCreatorsGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronCreatorsGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronCreatorsGetOK as json.
func (s *APICronCreatorsGetOK) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronCreatorsGetOK from json.
func (s *APICronCreatorsGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronCreatorsGetOK to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronCreatorsGetOK(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronCreatorsGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronCreatorsGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronCreatorsGetUnauthorized as json.
func (s *APICronCreatorsGetUnauthorized) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronCreatorsGetUnauthorized from json.
func (s *APICronCreatorsGetUnauthorized) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronCreatorsGetUnauthorized to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronCreatorsGetUnauthorized(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronCreatorsGetUnauthorized) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronCreatorsGetUnauthorized) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronExistVideosGetBadRequest as json.
func (s *APICronExistVideosGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronExistVideosGetBadRequest from json.
func (s *APICronExistVideosGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronExistVideosGetBadRequest to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronExistVideosGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronExistVideosGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronExistVideosGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronExistVideosGetForbidden as json.
func (s *APICronExistVideosGetForbidden) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronExistVideosGetForbidden from json.
func (s *APICronExistVideosGetForbidden) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronExistVideosGetForbidden to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronExistVideosGetForbidden(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronExistVideosGetForbidden) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronExistVideosGetForbidden) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronExistVideosGetInternalServerError as json.
func (s *APICronExistVideosGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronExistVideosGetInternalServerError from json.
func (s *APICronExistVideosGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronExistVideosGetInternalServerError to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronExistVideosGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronExistVideosGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronExistVideosGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronExistVideosGetNotFound as json.
func (s *APICronExistVideosGetNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronExistVideosGetNotFound from json.
func (s *APICronExistVideosGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronExistVideosGetNotFound to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronExistVideosGetNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronExistVideosGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronExistVideosGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronExistVideosGetOK as json.
func (s *APICronExistVideosGetOK) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronExistVideosGetOK from json.
func (s *APICronExistVideosGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronExistVideosGetOK to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronExistVideosGetOK(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronExistVideosGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronExistVideosGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronExistVideosGetUnauthorized as json.
func (s *APICronExistVideosGetUnauthorized) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronExistVideosGetUnauthorized from json.
func (s *APICronExistVideosGetUnauthorized) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronExistVideosGetUnauthorized to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronExistVideosGetUnauthorized(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronExistVideosGetUnauthorized) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronExistVideosGetUnauthorized) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronSearchVideosGetBadRequest as json.
func (s *APICronSearchVideosGetBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronSearchVideosGetBadRequest from json.
func (s *APICronSearchVideosGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronSearchVideosGetBadRequest to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronSearchVideosGetBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronSearchVideosGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronSearchVideosGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronSearchVideosGetForbidden as json.
func (s *APICronSearchVideosGetForbidden) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronSearchVideosGetForbidden from json.
func (s *APICronSearchVideosGetForbidden) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronSearchVideosGetForbidden to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronSearchVideosGetForbidden(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronSearchVideosGetForbidden) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronSearchVideosGetForbidden) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronSearchVideosGetInternalServerError as json.
func (s *APICronSearchVideosGetInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronSearchVideosGetInternalServerError from json.
func (s *APICronSearchVideosGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronSearchVideosGetInternalServerError to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronSearchVideosGetInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronSearchVideosGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronSearchVideosGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronSearchVideosGetNotFound as json.
func (s *APICronSearchVideosGetNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronSearchVideosGetNotFound from json.
func (s *APICronSearchVideosGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronSearchVideosGetNotFound to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronSearchVideosGetNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronSearchVideosGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronSearchVideosGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronSearchVideosGetOK as json.
func (s *APICronSearchVideosGetOK) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronSearchVideosGetOK from json.
func (s *APICronSearchVideosGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronSearchVideosGetOK to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronSearchVideosGetOK(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronSearchVideosGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronSearchVideosGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APICronSearchVideosGetUnauthorized as json.
func (s *APICronSearchVideosGetUnauthorized) Encode(e *jx.Encoder) {
	unwrapped := (*CronResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APICronSearchVideosGetUnauthorized from json.
func (s *APICronSearchVideosGetUnauthorized) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICronSearchVideosGetUnauthorized to nil")
	}
	var unwrapped CronResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APICronSearchVideosGetUnauthorized(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICronSearchVideosGetUnauthorized) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICronSearchVideosGetUnauthorized) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *APIPingGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *APIPingGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfAPIPingGetOK = [1]string{
	0: "message",
}

// Decode decodes APIPingGetOK from json.
func (s *APIPingGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIPingGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode APIPingGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APIPingGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIPingGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CronResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CronResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfCronResponse = [1]string{
	0: "message",
}

// Decode decodes CronResponse from json.
func (s *CronResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CronResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CronResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CronResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CronResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PingPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PingPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfPingPostOK = [1]string{
	0: "message",
}

// Decode decodes PingPostOK from json.
func (s *PingPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PingPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PingPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PingPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PingPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
